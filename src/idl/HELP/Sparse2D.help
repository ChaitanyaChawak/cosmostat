%VERSION:2
10
90
0:ISTAR2D
1679:MR_DECONV
8563:MR_FILTER
15918:MR_INFO
20168:MR_READ
21202:MR_RECONS
22509:MR_TRANSFORM
27796:STAR2D
29730:STAR2D_ADJOINT
31368:STAR2D_DRC
;+
 NAME:
        ISTAR2D

 PURPOSE:
       Reconstruct an image from its starlet transform. 
       The output is a 2D IDL array. If the keyword Gen2 is set, then it is
       the 2nd generation starlet transform which was is used computed:  i.e. g = Id - h*h 
       instead of g = Id - h. 
       If  the keyword Gen2 is not set, the reconstruction is done by simple co-addition 
       of all frames: Rec = total(output, 3)
       
 CALLING:
      Rec = ISTAR2D(Trans, Gen2=Gen2)
       
 INPUTS:
     Trans -- 3D IDL array: Starlet transform of an image

 OUTPUTS:
     Rec -- 2D IDL array: Reconstructed image
  
 KEYWORDS:
     Gen2 -- scalar: if set, it is the seconde generation of the starlet transform which is used.
 
 EXAMPLE:
       Compute the multiresolution of the image I with default options
       (i.e. a trou algorithm with 4 scales).  
               Output = STAR2D(I)
       Reconstruction can be done by simple co-addition of all frames:
               Rec = total(output, 3)

 REFERENCES:
    [1] J.L. Starck and F. Murtagh, 
    "Image Restoration with Noise Suppression 
    Using the Wavelet Transform",
    Astronomy and Astrophysics, 288, pp-343-348, 1994.

    For the modified STARLET transform:
    [2] J.-L. Starck, J. Fadili and F. Murtagh, "The Undecimated Wavelet Decomposition 
        and its Reconstruction", IEEE Transaction on Image Processing,  16,  2, pp 297--309, 2007.
 AUTHOR:
    J.L. Starck
    Service d'Astrophysique, Centre d'Etudes de SACLAY,
    Orme des Merisiers, 91191 GIF-Sur-YVETTE CEDEX, France 
    Email: jstarck@cea.fr        Tel:  +33 (0) 169 085 764
    http://jstarck.free.fr       Fax:  +33 (0) 169 086 577
;-
;+
 NAME: 
       MR_DECONV

 PURPOSE: 
       Deconvolve of an image by using a multiresolution transform.
       The deconvolution method is described in:
       J.L. Starck, A. Bijaoui, and F. Murtagh, "Multiresolution Support
       Applied to Image Filtering and Deconvolution", in CVIP: Graphical
       Models and Image Processing, Vol. 57, 5, pp 420-431, Sept. 1995.


 CALLING:

       MR_DECONV, Imag, Psf, Result, Opt=Opt

 INPUTS:
       Imag: image to deconvolve
       Psf:  Point Spread Function

 KEYWORDS:
      Opt: string which contains the differents options. Options are:
           [-d type_of_deconvolution]
               type_of_deconvolution = 
                  1: Deconvolution by multiresolution Van Cittert's algorithm
                  2: Deconvolution by multiresolution Gradient's algorithm
                  3: Deconvolution by multiresolution Lucy's algorithm 
                  4: Deconvolution by multiresolution MAP algorithm 
                  5: Deconvolution by the division in Fourier space 
                                                          + Wavelet filtering 
                  default is 3

          [-t type_of_multiresolution_transform]
                  1: linear wavelet transform: a trous algorithm 
                  2: bspline wavelet transform: a trous algorithm 
                  3: wavelet transform in Fourier space 
                  4: morphological median transform 
                  5: morphological minmax transform 
                  6: pyramidal linear wavelet transform 
                  7: pyramidal bspline wavelet transform 
                  8: pyramidal wavelet transform in Fourier space: 
                     wavelet =  between two resolutions 
                  9: pyramidal wavelet transform in Fourier space: 
                     wavelet = difference  between the square 
                                                of two resolutions
                 10: pyramidal median transform 
                 11: morphological pyramidal minmax transform 
                 12: pyramidal laplacian 
                 13: decomposition on scaling function 
                 14: Mallat's wavelet transform (7/9 filters) 
                 15: Feauveau's wavelet transform 
                 16: Feauveau's wavelet transform without undersampling 
                 17: G transform (morphological min-max algorithm) 
                 18: Haar's wavelet transform 
                 19: Half-pyramidal transform 
                 20: Mixed Half-pyramidal WT and Median method (WT-HPMT) 
                 21: diadic wavelet transform 
                 22: Mixed WT and PMT method (WT-PMT) 
                 23: undecimated Haar transform: a trous algorithm 
                 24: undecimated mallat transform (three bands per scale)
                 default is bspline wavelet transform: 
                                       a trous algorithm

          [-T type_of_filters]
                 1: Antonini 7/9 filters 
                 2: Daubechies filter 4 
                 3: Biorthogonal 2/6 Haar filters 
                 4: Biorthogonal 2/10 Haar filters 
                 5: Odegard 7/9 filters 
                 6: User's filters 
                 default is Antonini 7/9 filters
                
           [-u number_of_undecimated_scales]
                Number of undecimated scales used in the 
                Undecimated Wavelet Transform

           [-g sigma]
                Gaussian noise
                  sigma = noise standard deviation 
                by default, the noise is gaussian, and the standard 
                deviation is automatically estimated. 

           [-c gain,sigma,mean]
                case of a CCD: noise = Poisson noise + read-out noise
                  gain = CCD gain 
                  sigma = standard deviation of the read-out noise
                  mean = mean of the read-out noise
                if this option is set, 
                           Noise = Poisson + Gaussian read-out Noise
                it is generally the case with the CCD.
                Attention, these parameters must be separated by a comma 
                without space. example: -c 0.133,1.733,0.
                If mean, or sigma and mean are omitted, default values are 0.
                gain can not be omitted. 

         [-m type_of_noise]
              1: Gaussian noise 
              2: Poisson noise 
              3: Poisson noise + Gaussian noise 
              4: Multiplicative noise 
              5: Non-stationary additive noise 
              6: Non-stationary multiplicative noise 
              7: Undefined uniform noise 
              8: Undefined noise 
              9: Stationary correlated noise 
             default is Gaussian noise

           [-n number_of_scales]
                number of scales used in the multiresolution transform
                default is 4

           [-s NSigma]
                Thresolding at NSigma * SigmaNoise at each scale
                default is 3

           [-i number_of_iterations]
              Maximum number of iterations
              default is 500

           [-e Epsilon]
                Convergence parameter
                default is 0.001
   
           [-R RMS_Map_File_Name]
               RMS Map (only used with -m 5 and -m 9 options). 

           [-f ICF_Fwhm]
                Intrinsic correlation function.
                Fwhm = Full Width at Half Maximum.
  
           [-P]
               Suppress the positivity constraint.

           [-I ICF_FileName]
                Intrinsic correlation function file.

           [-F First_Guess]
                Input solution file.

           [-r residual_file_name]
               Residual_file_name = file name
               write the residual to the disk 
 
           [-S]
               Do not shift automatically the maximum  
               of the PSF at the center.

           [-p]
               Detect only positive structure. Default is no.
   
           [-K]
               Suppress the last scale. Default is no.
   
           [-O]
               Optimization.

 OUTPUTS:
           Result: result of the deconvolution

 EXTERNAL CALLS:
           mr_deconv (C++ program)

 EXAMPLE:
           deconvolve an image with all default options (Lucy method + 
           regularization in the wavelet space by using the a-trou 
           algorithm, ...)
                MR_DECONV, Imag, Psf, Result

          same example, but impose the number of iterations to be 30
                MR_DECONV, Imag, Psf, Result, OPT='-i 30 -e 0'

          deconvolution by the one step gradient method, without 
          any regularization, with 30 iterations
                MR_DECONV, Imag, Psf, Result, OPT='-d 2 -i 30'

 HISTORY:
	Written: Jean-Luc Starck 1996.
	December, 1996 File creation
       October, 1999 Header Update
;-
;+
 NAME: 
       MR_FILTER

 PURPOSE: 
       filter  an image by using a multiresolution transform.
       
 CALLING:

       MR_FILTER, Imag, Result, Opt

 INPUTS:
       Imag: image to filter

 KEYWORDS:
      Opt: string which contains the differents options. Options are:
         [-f type_of_filtering]
              1: Multiresolution Hard K-Sigma Thresholding  
              2: Multiresolution Soft K-Sigma Thresholding
              3: Iterative multiresolution thresholding 
              4: Adjoint operator applied to the multiresolution support  
              5: Hierarchical thresholding 
              6: Hierarchical Wiener filtering 
              7: Multiresolution Wiener filtering 
              8: Median filtering 
              9: Average filtering 
              10: Bspline filtering 
              11: Donoho hard thesholding 
              12: Donoho soft thesholding 
              13: SURE Hard Thesholding 
              14: SURE Soft Thesholding 
              15: MULTI-SURE Hard Thesholding 
              16: MULTI-SURE Soft Thesholding 
              17: Median Absolute Deviation (MAD) Hard Thesholding 
              18: Median Absolute Deviation (MAD) Soft Thesholding 
              default is Multiresolution Hard K-Sigma Thresholding.

          [-t type_of_multiresolution_transform]
                  1: linear wavelet transform: a trous algorithm 
                  2: bspline wavelet transform: a trous algorithm 
                  3: wavelet transform in Fourier space 
                  4: morphological median transform 
                  5: morphological minmax transform 
                  6: pyramidal linear wavelet transform 
                  7: pyramidal bspline wavelet transform 
                  8: pyramidal wavelet transform in Fourier space: 
                     wavelet =  between two resolutions 
                  9: pyramidal wavelet transform in Fourier space: 
                     wavelet = difference  between the square 
                                                of two resolutions
                 10: pyramidal median transform 
                 11: pyramidal laplacian 
                 12: morphological pyramidal minmax transform 
                 13: decomposition on scaling function 
                 14: Mallat's wavelet transform 
                 15: Feauveau's wavelet transform 
                 16: Feauveau's wavelet transform without undersampling 
                 17: G transform (morphological min-max algorithm 
                 18: Haar's wavelet transform 
                 19: Half-pyramidal transform 
                 20: Mixed Half-pyramidal WT and Median method (WT-HPMT) 
                 21: diadic wavelet transform 
                 22: Mixed WT and PMT method (WT-PMT) 
                 23: undecimated Haar transform: a trous algorithm 
                 24: undecimated mallat transform (three bands per scale)
                 default is 2

          [-T type_of_filters]
              1: Antonini 7/9 filters 
              2: Daubechies filter 4 
              3: Biorthogonal 2/6 Haar filters 
              4: Biorthogonal 2/10 Haar filters 
              5: Odegard 7/9 filters 
              6: User's filters 
              default is Antonini 7/9 filters

           [-u number_of_undecimated_scales]
                Number of undecimated scales used in the 
                Undecimated Wavelet Transform

           [-g sigma]
                Gaussian noise
                  sigma = noise standard deviation 
                by default, the noise is gaussian, and the standard 
                devaition is automatically estimated. 

           [-c gain,sigma,mean]
                case of a CCD: noise = Poisson noise + read-out noise
                  gain = CCD gain 
                  sigma = standard deviation of the read-out noise
                  mean = mean of the read-out noise
                if this option is set, 
                           Noise = Poisson + Gaussian read-out Noise
                it is generally the case with the CCD.
                Attention, these parameters must be separated by a comma 
                without space. example: -c 0.133,1.733,0.
                If mean, or sigma and mean are omitted, default values are 0.
                gain can not be omitted. 

           [-m]
              1: Gaussian Noise 
              2: Poisson Noise 
              3: Poisson Noise + Gaussian Noise 
              4: Multiplicative Noise 
              5: Non uniform additive noise 
              6: Non uniform multiplicative noise 
              7: Undefined uniform Noise 
              8: Undefined Noise 
              9: Stationary correlated noise 
              10: Poisson Noise with few events 
             default is Gaussian noise

           [-n number_of_scales]
                number of scales used in the multiresolution transform
                default is 4.
                default is 6 in case of poisson noise with few events 

           [-s NSigma]
                Thresolding at NSigma * SigmaNoise at each scale
                default is 3

           [-i number_of_iterations]
              Maximum number of iterations
              default is 10
              default is 0.000010 in case of poisson noise with few events

           [-e Epsilon]
                Convergence parameter
                default is 0.0001

           [-w support_file_name]
              support_file_name = file name
              creates an image from the support 
              and write it on the disk

           [-k]
              Suppress isolated pixel in the support.
              Default is no.

           [-K]
              Suppress the last scale. Default is no.

           [-p]
              Detect only positive structure 
              default is no

           [-E Epsilon]
             Epsilon = precision for computing thresholds
                       (only used in case of poisson noise with few events)
             default is 1.000000e-03 


           [-S SizeBlock]
             Size of the  blocks used for local variance estimation.
             default is 7 


           [-N NiterSigmaClip]
             iteration number used for local variance estimation.
             default is 1 


           [-F first_detection_scale]
              first scale used for the detection 
              default is 1


           [-R RMS_Map_File_Name]
               RMS Map (only used with -m 5 and -m 9 options).

           [-W WindowSize]
               Window size for median and average filtering.
               default is 5.

           [-b]
               Add the maximum level constraint.
               Max value is 255. Default is no.

           [-v]
              Verbose. Default is no.

           [-P]
              Suppress the positivity constraint.


 OUTPUTS:
           Result: result of the deconvolution

 EXTERNAL CALLS:
           mr_filter (C++ program)

 EXAMPLE:
           filter an image with all default options 
                MR_FILTER, Imag, Result

          same example, but impose the number of scales  to be 3, and 
          a thresolding at 5 sigma
                MR_FILTER, Imag, Psf, Result, OPT='-n 3 -s 5'


 HISTORY:
	Written: Jean-Luc Starck 1994.
	December, 1995 File creation
       October, 1999 Header Update
;-
;+
 NAME: 
       MR_INFO

 PURPOSE: 
       Calculate statistical information about the wavelet transform
       of an image.

 CALLING:
       MR_Info, Imag, TabStat, OPT=Opt, nodel=nodel, NameRes=NameRes

 INPUT:
       Imag: image 

 KEYWORDS:

      NameRes: Outfile file name for the statistic table

      nodel: if set, the created files (by the program mr_info)
             are not deleted.

      Opt: string which contains the differents options. Options are:


          [-t type_of_multiresolution_transform]
                  1: linear wavelet transform: a trous algorithm 
                  2: bspline wavelet transform: a trous algorithm 
                  3: wavelet transform in Fourier space 
                  4: morphological median transform 
                  5: morphological minmax transform 
                  6: pyramidal linear wavelet transform 
                  7: pyramidal bspline wavelet transform 
                  8: pyramidal wavelet transform in Fourier space: 
                     wavelet =  between two resolutions 
                  9: pyramidal wavelet transform in Fourier space: 
                     wavelet = difference  between the square 
                                                of two resolutions
                 10: pyramidal median transform 
                 11: pyramidal laplacian 
                 12: morphological pyramidal minmax transform 
                 13: decomposition on scaling function 
                 14: Mallat's wavelet transform 
                 15: Feauveau's wavelet transform 
                 16: Feauveau's wavelet transform without undersampling 
                 17: G transform (morphological min-max algorithm 
                 18: Haar's wavelet transform 
                 19: Half-pyramidal transform 
                 20: Mixed Half-pyramidal WT and Median method (WT-HPMT) 
                 21: diadic wavelet transform 
                 22: Mixed WT and PMT method (WT-PMT) 
                 23: undecimated Haar transform: a trous algorithm 
                 24: undecimated mallat transform (three bands per scale)
                 25: Wavelet transform via lifting scheme 
                 default is 2

          [-T type_of_filters]
              1: Antonini 7/9 filters 
              2: Daubechies filter 4 
              3: Biorthogonal 2/6 Haar filters 
              4: Biorthogonal 2/10 Haar filters 
              5: Odegard 7/9 filters 
              6: User's filters 
              default is Antonini 7/9 filters

         [-n number_of_scales]
             number of scales used in the multiresolution transform
              default is 5

         [-L]
             Use a L2 normalization. Default is L1

         [-u number_of_undecimated_scales]
                Number of undecimated scales used in the 
                Undecimated Wavelet Transform

         [-g sigma]
             sigma = noise standard deviation
              default is automatically estimated

         [-c gain,sigma,mean]
             gain = gain of the CCD
             sigma = read-out noise standard deviation
             mean = read-out noise mean
               noise = poisson + readout noise. default is no (Gaussian)

         [-p]
            Poisson Noise
             default is no (Gaussian).

         [-s nsigma]
              Thresholding at nsigma * SigmaNoise
              default is 3.000000

         [-k]
           Suppress isolated pixels in the support. Default is no.
 
         [-a]
              Significant structures analysis.
              default is no.

         [-l] 
              Dilate the support
	     
         [-v] 
              Verbose

 OUTPUTS:
           TabStat: fltarr(NbrBand, NbrStat) 
                    TabStat(j,0) = standard deviation of the jth band
                    TabStat(j,1) = skewness of the jth band
                    TabStat(j,2) = kurtosis of the jth band
                    TabStat(j,3) = minimum of the jth band
                    TabStat(j,4) = maximum of the jth band

 EXTERNAL CALLS:
           mr_info (C++ program)

 EXAMPLE:
           calculate the statistics with all default options 
                mr_info, Imag, TabStat

 HISTORY:
	Written: Jean-Luc Starck 2002.
;-
;+
 NAME:
         MR_READ

 PURPOSE:
    read a multiresolution file (extension ".mr")
    If it is a pyramidal transform or half pyramidal transform, 
    we have 3 different outputs:
        1) an image  containing several sub-images ( flag raw set)
        2) a cube  of interpolated or rebinned images ( flag interpol set)
        3) a structure containing several sub-images  (default)

 CALLING:

      output = MR_READ(filename, /interpol, /raw, /debug)

 INPUTS:
     Imag -- string: file name

 KEYED INPUTS:
     interpol -- integer: 0 -> the output will not be interpolated
                          1 -> the output will be rebinned
                          2 -> the output will be interpolated
                  this for pyramidal
     raw   -- flag : if set the output is the input of the fits file

 OUTPUTS:
     output -- cube of float: the image(s)

 CALLED ROUTINES
   READFITS

 HISTORY:
	Written: Jean-Luc Starck 1995.
	December, 1995 File creation
       Modification : 18-FEB-1997  R Gastaud for fits file

;-
;+
 NAME:
        MR_RECONS

 PURPOSE:
	Reconstruct an image from its multiresolution transform. If the
       the keyword MR_File_Name is set, a multiresolution transform   
       must already exist. A multiresolution file
       has a .mr extension, if the parameter file name have not one, then
       the extension is added to the file name. If the MR_File_Name is not
       set, then the Fits Header of the multiresolution file must be given.
       Result is store in Imag.

 CALLING:

      MR_RECONS, DataTransf, Imag, MR_File_Name=MR_File_Name, Header=Header
       

 INPUTS:
     DataTransf -- 2D or 3D array: multiresolution transform
    
 OUTPUTS:
     Imag -- 2D IDL array: image we want transform;

 KEYWORDS:
      MR_File_Name -- string: multiresolution file

      Header -- string: FITS Header


 EXTERNAL CALLS:
       mr_recons (C++ program)

 EXAMPLE:

       Compute the multiresolution of the image I with default options
       (i.e. a trou algorithm with 4 scales). The result is stored in 
       the file result.mr
             MR_TRANSFORM, I, Output, MR_File_Name='result.mr'

       Reconstruct the image from the transformation
              MR_RECONS, Output, RecIma, MR_File_Name='result_pyr_med'

 HISTORY:
	Written: Jean-Luc Starck 2003.
	April, 2003 File creation
;-
;+
 NAME:
        MR_TRANSFORM

 PURPOSE:
	Computes a multiresolution transform of an image. If the
       the keyword MR_File_Name is set, a file is created
       which contains the multiresolution transform. A multiresolution file
       has a .mr extension, if the parameter file name have not one, then
       the extension is added to the file name. Result is store in DataTransf.
       Dependiong on the options (see OPT), DataTransf can be a cube or an
       image. If the keyword is not set, the created file is deleted.

 CALLING:

      MR_TRANSFORM, Imag, DataTransf, MR_File_Name=MR_File_Name, OPT=Opt
       

 INPUTS:
     Imag -- 2D IDL array: image we want transform
    
     MR_File_Name: string containing the file multiresolution
                   file name

 OUTPUTS:
     DataTransf -- 2D or 3D array: multiresolution transform

 KEYWORDS:
      MR_File_Name -- string: multiresolution file

      Opt -- string: string which contains the differents options. Options are:

        where options = 

          [-t type_of_multiresolution_transform]
                  1: linear wavelet transform: a trous algorithm 
                  2: bspline wavelet transform: a trous algorithm 
                  3: wavelet transform in Fourier space 
                  4: morphological median transform 
                  5: morphological minmax transform 
                  6: pyramidal linear wavelet transform 
                  7: pyramidal bspline wavelet transform 
                  8: pyramidal wavelet transform in Fourier space: 
                     wavelet =  between two resolutions 
                  9: pyramidal wavelet transform in Fourier space: 
                     wavelet = difference  between the square 
                                                of two resolutions
                 10: pyramidal median transform 
                 11: pyramidal laplacian 
                 12: morphological pyramidal minmax transform 
                 13: decomposition on scaling function 
                 14: Mallat's wavelet transform 
                 15: Feauveau's wavelet transform 
                 16: Feauveau's wavelet transform without undersampling 
                 17: G transform (morphological min-max algorithm 
                 18: Haar's wavelet transform 
                 19: Half-pyramidal transform 
                 20: Mixed Half-pyramidal WT and Median method (WT-HPMT) 
                 21: diadic wavelet transform 
                 22: Mixed WT and PMT method (WT-PMT) 
                 23: undecimated Haar transform: a trous algorithm 
                 24: undecimated mallat transform (three bands per scale)
                 25: Wavelet transform via lifting scheme 
                 default is 2

          [-T type_of_filters]
              1: Antonini 7/9 filters 
              2: Daubechies filter 4 
              3: Biorthogonal 2/6 Haar filters 
              4: Biorthogonal 2/10 Haar filters 
              5: Odegard 7/9 filters 
              6: User's filters 
              default is Antonini 7/9 filters

          [-l type_of_lifting_transform]
              1: Lifting scheme: CDF WT 
              2: Lifting scheme: median prediction 
              3: Lifting scheme: integer Haar WT 
              4: Lifting scheme: integer CDF WT 
              5: Lifting scheme: integer (4,2) interpolating transform 
              6: Lifting scheme: 7/9 WT 
              7: Lifting scheme: integer 7/9 WT 
             default is Lifting scheme: integer Haar WT
   
           [-n number_of_scales]
                number of scales used in the multiresolution transform
                default is 4

           [-x] 
                write all scales separatly as images with prefix "scale_j"
                (j being the scale number)

           [-B] 
                same as x option, but interpolate by block the scales.
                This option is valid only if the choosen multiresolution 
                transform is pyramidal (6,7,8,9,10,11,12)

           [-c iter] 
                iterative transformation. Iter = number of iterations.
                This option is valid only if the choosen multiresolution 
                transform is pyramidal (6,7,8,9,10,11). The reconstruction
                is not exact and we need few iterations. Generally 3
                iterations are enough.

           [-u number_of_undecimated_scales]
                Number of undecimated scales used in the 
                Undecimated Wavelet Transform

           [-L]
                Use a L2 normalization. Default is L1

 EXTERNAL CALLS:
       mr_transform (C++ program)

 EXAMPLE:

       Compute the multiresolution of the image I with default options
       (i.e. a trou algorithm with 4 scales). The result is stored in 
       the file result.mr
               MR_TRANSFORM, I, Output, MR_File_Name='result.mr'

       Compute the multiresolution of I by using the pyramidal median 
       algorithm with 5 scales. The result is stored in the file
       result_pyr_med.mr
              MR_TRANSFORM, I, Output, MR_File_Name='result_pyr_med', $
                            OPT='-t 10 -n 5'

 HISTORY:
	Written: Jean-Luc Starck 1995.
	December, 1995 File creation
       October, 1999 Header Update
;-
;+
 NAME:
        STAR2D

 PURPOSE:
       Computes the starlet transform of an image (i.e. undecimated isotropic wavelet transform). 
       The output is a 3D IDL array. If the keyword Gen2 is set, then it is
       the 2nd generation starlet transform which is computed:  i.e. g = Id - h*h 
       instead of g = Id - h.
       
 CALLING:
      DataTransf = STAR2D(Imag, Nscale=Nscale, Gen2=Gen2)
       
 INPUTS:
     Imag -- 2D IDL array: image we want to transform

 OUTPUTS:
     DataTransf -- 3D IDL array: Wavelet Transform
                                 DataTransf(*,*,i) = ith band of the 
                                                    wavelet transform
  
 KEYWORDS:
      Nscale -- int: Number of scales. Default is 4.
                     DataTransf is a cube of Nscale planes: 
                                      DataTransf(*,*,0: Nscale-1)
			There is no test of the validity of the number of scales with respect
			to the size of the input images. 
 
 EXAMPLE:
       Compute the starlet transform of an image I with default options
       (i.e. a trou algorithm with 4 scales).  
               Output = STAR2D(I)
       Reconstruction can be done by simple co-addition of all frames:
               Rec = total(output, 3)

 REFERENCES:
    [1] J.L. Starck and F. Murtagh, 
    "Image Restoration with Noise Suppression 
    Using the Wavelet Transform",
    Astronomy and Astrophysics, 288, pp-343-348, 1994.
    

    For the modified STARLET transform:
    [2] J.-L. Starck, J. Fadili and F. Murtagh, "The Undecimated Wavelet Decomposition 
        and its Reconstruction", IEEE Transaction on Image Processing,  16,  2, pp 297--309, 2007.
 AUTHOR:
    J.L. Starck
    Service d'Astrophysique, Centre d'Etudes de SACLAY,
    Orme des Merisiers, 91191 GIF-Sur-YVETTE CEDEX, France 
    Email: jstarck@cea.fr        Tel:  +33 (0) 169 085 764
    http://jstarck.free.fr       Fax:  +33 (0) 169 086 577
;-
;+
 NAME:
        STAR2D_ADJOINT

 PURPOSE:
       Computes the adjoint of the starlet transform of an image (i.e. undecimated isotropic wavelet transform). 
       The output is a 1D IDL array. If the keyword Gen2 is set, then it is
       the 2nd generation starlet transform which is computed:  i.e. g = Id - h*h 
       instead of g = Id - h.
       
 CALLING:
      Imag = STAR2D_ADJOINT(DataTrans, Gen2=Gen2)
       
 INPUTS:
      DataTransf -- 3D IDL array: Wavelet Transform
                                 DataTransf(*,*,i) = ith band of the 
                                                    wavelet transform

 OUTPUTS:   
     Imag -- 2D IDL array: image we want to transform

 
 
 EXAMPLE:
       Compute the starlet transform of an image I with default options
       (i.e. a trou algorithm with 4 scales).  
               Output = STAR2D(I)
       Reconstruction using the adjoint operator:
               RecI = STAR2D_ADJOINT(Output)

 REFERENCES:
    [1] J.L. Starck and F. Murtagh, 
    "Image Restoration with Noise Suppression 
    Using the Wavelet Transform",
    Astronomy and Astrophysics, 288, pp-343-348, 1994.
    

    For the modified STARLET transform:
    [2] J.-L. Starck, J. Fadili and F. Murtagh, "The Undecimated Wavelet Decomposition 
        and its Reconstruction", IEEE Transaction on Image Processing,  16,  2, pp 297--309, 2007.
 AUTHOR:
    J.L. Starck
    Service d'Astrophysique, Centre d'Etudes de SACLAY,
    Orme des Merisiers, 91191 GIF-Sur-YVETTE CEDEX, France 
    Email: jstarck@cea.fr        Tel:  +33 (0) 169 085 764
    http://jstarck.free.fr       Fax:  +33 (0) 169 086 577
;-
;+
 NAME:
        STAR2D_DRC

 PURPOSE:
       Dynamic Range Compression using the 2D starlet transform of an image . 
       The output is a 2D image.  

 CALLING:
      DRC = STAR2D_DRC(Imag, Nscale=Nscale, Eps=Eps)
       
 INPUTS:
     Imag -- 2D IDL array: image we want to transform

 OUTPUTS:
     DRC -- 2D IDL array: Image
  
 KEYWORDS:
      Nscale -- int: Number of scales. Default is 4.
 
 EXAMPLE:
       DRC_Image = STAR2D_DRC(I)

 REFERENCES:
    J.-L. Starck, M. Elad, and D.L. Donoho,
    "Redundant Multiscale Transforms and their Application for Morphological
    Component Analysis", Advances in Imaging and Electron Physics, 132, 2004.

 EXTERNAL CALL:  
     star2d.pro

 AUTHOR:
    J.L. Starck
    Service d'Astrophysique, Centre d'Etudes de SACLAY,
    Orme des Merisiers, 91191 GIF-Sur-YVETTE CEDEX, France 
    Email: jstarck@cea.fr        Tel:  +33 (0) 169 085 764
    http://jstarck.free.fr       Fax:  +33 (0) 169 086 577
;-
