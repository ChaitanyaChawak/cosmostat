%VERSION:2
5
45
0:ISTAR1D
1681:MR1D_FILTER
6667:MR1D_RECONS
7294:MR1D_TRANS
14229:STAR1D
;+

 NAME:
        ISTAR1D

 PURPOSE:
       Reconstruct a signal from its starlet transform. 
       The output is a 1D IDL array. If the keyword Gen2 is set, then it is
       the 2nd generation starlet transform which was is used computed:  i.e. g = Id - h*h 
       instead of g = Id - h. 
       If  the keyword Gen2 is not set, the reconstruction is done by simple co-addition 
       of all scales: Rec = total(output, 2)
       
 CALLING:
      Rec = ISTAR1D(Trans, Gen2=Gen2)
       
 INPUTS:
     Trans -- 2D IDL array: Starlet transform of an image

 OUTPUTS:
     Rec -- 1D IDL array: Reconstructed image
  
 KEYWORDS:
     Gen2 -- scalar: if set, it is the seconde generation of the starlet transform which is used.
 
 EXAMPLE:
       Compute the starlet transform of a signal I with default options
       (i.e. a trou algorithm with 4 scales).  
               Output = STAR2D(I)
       Reconstruction can be done by simple co-addition of all scales:
               Rec = total(output, 2)

 REFERENCES:
    [1] J.L. Starck and F. Murtagh, 
    "Image Restoration with Noise Suppression 
    Using the Wavelet Transform",
    Astronomy and Astrophysics, 288, pp-343-348, 1994.

    For the modified STARLET transform:
    [2] J.-L. Starck, J. Fadili and F. Murtagh, "The Undecimated Wavelet Decomposition 
        and its Reconstruction", IEEE Transaction on Image Processing,  16,  2, pp 297--309, 2007.
 AUTHOR:
    J.L. Starck
    Service d'Astrophysique, Centre d'Etudes de SACLAY,
    Orme des Merisiers, 91191 GIF-Sur-YVETTE CEDEX, France 
    Email: jstarck@cea.fr        Tel:  +33 (0) 169 085 764
    http://jstarck.free.fr       Fax:  +33 (0) 169 086 577
;-
;+
 NAME: 
       MR1D_FILTER

 PURPOSE: 
       Filter a 1D signal by the multiresolution support method. If the input is a 2D array Data[*,0:N], then 
       apply independantly N times the signal Data[*,i].
       
 CALLING:

       MR1D_FILTER, Signal, Result, Opt

 INPUTS:
       Signal -- IDL 1D array: Signal to filter

 KEYWORDS:

      Opt: string which contains the differents options. Options are:

         [-f type_of_filtering]
              1: Multiresolution Hard K-Sigma Thresholding 
              2: Multiresolution Soft K-Sigma Thresholding 
              3: Iterative Multiresolution Thresholding 
              4: Universal Hard Thesholding 
              5: Universal Soft Thesholding 
              6: SURE Hard Thesholding 
              7: SURE Soft Thesholding 
              8: MULTI-SURE Hard Thesholding 
              9: MULTI-SURE Soft Thesholding 
              10: Median Absolute Deviation (MAD) Hard Thesholding 
              11: Median Absolute Deviation (MAD) Soft Thesholding 
              default is Multiresolution Hard K-Sigma Thresholding.

         [-t type_of_multiresolution_transform]
               1: linear wavelet transform: a trous algorithm 
               2: b1spline wavelet transform: a trous algorithm 
               3: b3spline wavelet transform: a trous algorithm 
               4: Derivative of a b3spline: a trous algorithm 
               5: undecimated Haar wavelet transform: a trous algorithm 
               6: morphological median transform 
               7: Undecimated (bi-) orthogonal wavelet transform
               8: pyramidal linear wavelet transform 
               9: pyramidal b3spline wavelet transform 
               10: pyramidal median transform 

          [-T type_of_filters]
              1: Antonini 7/9 filters 
              2: Daubechies filter 4 
              3: Biorthogonal 2/6 Haar filters 
              4: Biorthogonal 2/10 Haar filters 
              5: Odegard 7/9 filters 
              6: User's filters 
              default is Antonini 7/9 filters

    	    [-m type_of_noise]
              1: Gaussian Noise 
              2: Poisson Noise 
              3: Poisson Noise + Gaussian Noise 
              4: Multiplicative Noise 
              5: Non uniform additive noise 
              6: Non uniform multiplicative noise 
              7: Undefined uniform Noise 
              8: Undefined Noise 
              9: Stationary correlated noise 
              10: Poisson noise with few events 
      	       Default is Gaussian noise.

           [-g sigma]
                Gaussian noise
                  sigma = noise standard deviation 
                by default, the noise is gaussian, and the standard 
                devaition is automatically estimated. 

           [-c gain,sigma,mean]
                case of a CCD: noise = Poisson noise + read-out noise
                  gain = CCD gain 
                  sigma = standard deviation of the read-out noise
                  mean = mean of the read-out noise
                if this option is set, 
                           Noise = Poisson + Gaussian read-out Noise
                it is generally the case with the CCD.
                Attention, these parameters must be separated by a comma 
                without space. example: -c 0.133,1.733,0.
                If mean, or sigma and mean are omitted, default values are 0.
                gain can not be omitted. 

           [-E Epsilon]
                Epsilon = precision for computing thresholds
                          (only used in case of poisson noise with 
                           few events). Default is 1.00e-03 

           [-n number_of_scales]
                number of scales used in the multiresolution transform
                default is 4.
                default is 6 in case of poisson noise with few events 

           [-s NSigma]
                Thresolding at NSigma * SigmaNoise at each scale
                default is 3

           [-i number_of_iterations]
              Maximum number of iterations
              default is 10

           [-e Epsilon]
                Convergence parameter
                default is 0.0001

           [-K]
             Suppress the last scale. Default is no.

           [-p]
             Detect only positive structure. Default is no.

           [-k]
             Suppress isolated pixels in the support. Default is no.

           [-v]
             Verbose. Default is no.

 OUTPUTS:
           Result: result of the filtering

 EXTERNAL CALLS:
           mr1d_filter (C++ program)

 EXAMPLE:
           filter a signal with all default options 
                MR1D_FILTER, Signal, Result

          same example, but impose the number of scales  to be 3, and 
          a thresolding at 5 sigma
                MR1D_FILTER, Signal, Result, OPT='-n 3 -s 5'


 HISTORY:
	Written: Jean-Luc Starck 1994.
	December, 1995 File creation
       January, 1998 more noise options
;-
;+
 NAME: 
       MR1D_RECONS

 PURPOSE: 
        Reconstruct a one dimensional signal from its wavelet transform.   

 CALLING:
       MR1D_RECONS, WT_Struct, result
                   

 INPUT:
       WT_Struct : IDL structure; Wavelet transform structure (see MR1D_TRANS) 
          
 OUTPUTS:
      Result:  1D array
             

 EXTERNAL CALLS
           mr1d_recons (C++ program)

 EXAMPLE:

   > mr1d_trans, Signal, WT, OPT='-t 13 -n 4'
   > mr1d_recons, WT, Rec
       Orthogonal wavelet transform with 4 scales, and reconstruction

 HISTORY:
       Written: Jean-Luc Starck 1998.
       July, 1998 File creation
;-
;+
 NAME: 
       MR1D_TRANS

 PURPOSE: 
        One dimensional wavelet transform. 16 transforms are available, which are
        grouped in 5 classes 
                         Class 1: no decimation
                                  transform 1 to 5 and 9 to 12
                         Class 2: pyramidal transform
                                  transform 6 to 8
                         Class 3: orthogonal transform (13 and 14)
                         Class 4: Wavelet packets (15)
                         Class 5: Wavelet packets from the a-trous algorithm  (16)

        Depending on the class, the transform does not contain the
        same number of pixels, and the data representation differs.

 CALLING:
       MR1D_Trans, Signal, result, OPT=OPT, BAND=BAND, NODEL=NODEL
                   

 INPUT:
      Signal: 1D array; input signal 

 KEYWORDS:
      OPT: string which contains the differents options. Options are:
         [-t type_of_multiresolution_transform]
               1: linear wavelet transform: a trous algorithm 
               2: b1spline wavelet transform: a trous algorithm 
               3: b3spline wavelet transform: a trous algorithm 
               4: Derivative of a b3spline: a trous algorithm 
               5: undecimated Haar wavelet transform: a trous algorithm 
               6: morphological median transform 
               7: Undecimated (bi-) orthogonal wavelet transform 
               8: pyramidal linear wavelet transform 
               9: pyramidal b3spline wavelet transform 
               10: pyramidal median transform 
               11: Morlet's wavelet transform 
               12: mexican hat wavelet transform 
               13: french hat wavelet transform 
               14: Gaussian Derivative wavelet transform 
               15: bi-orthogonam transform   
               16: bi-orthogonam transform via lifting sheme (CDF filters) 
               17: Wavelet packets (CDF filters) 
               18: Wavelet packets from lifting sheme 
               19: Wavelet packets using the a-trous algorithm 
               Default is 3.

          [-r]
               rebin all scales to the input size
               (for pyramidal median transform only)

          [-k]
               set to 0 pixels contaminated by the border problem.     
 
   	   [-n number_of_scales]
    	        number of scales used in the multiresolution transform 
    	        Default value is automatically calculated.

          [-T type_of_filters]
              1: Antonini 7/9 filters 
              2: Daubechies filter 4 
              3: Biorthogonal 2/6 Haar filters 
              4: Biorthogonal 2/10 Haar filters 
              5: Odegard 7/9 filters 
              6: User's filters 
              default is Antonini 7/9 filters

          [-L]
              Use a L2 normalization. Default is L1.

          [-l type_of_lifting_transform]
              1: Lifting scheme: CDF WT 
              2: Lifting scheme: median prediction 
              3: Lifting scheme: integer Haar WT 
              4: Lifting scheme: integer CDF WT 
              5: Lifting scheme: integer (4,2) interpolating transform 
              6: Lifting scheme: 7/9 WT 
              7: Lifting scheme: integer 7/9 WT 
             default is Lifting scheme: integer Haar WT

         [-w InfoFileName]
              write in xx_info.fits the size and the starting index of each band.


 
      BAND:    if set, a tag per band is created in the output structure

      NODEL:   if set, the two created file are not deleted: 
                xx_result.fits : wavelet coefficients file
                xx_info.fits:    information about the transform
          
 OUTPUTS:
           Result: IDL structure which contains the wavelet transform
            The structure contains the following tags:
             N_BAND  : float  ; number of bands in the transfrom    
                                                
             INFO    : 2D float array (Array[2, NbrBand+3])
                       info[0,0] = transform number
                       info[1,0] = number of scales
                       info[0,1] = transform class number (5 classes)
                       info[1,1] = number of bands
                                 it is not equal to the number of scales
                                 for wavelet packets transform.
                       info[0,2] = number of pixels
                       info[1,2] = lifting scheme type
                       info[0,3] = type of filter
                       info[1,3] = type of normalization
                       for i=4 to Number_of_bands + 3
                       info[0,i] = number of pixels in the band i
                       info[1,i] = position number of the pixel of the band
                       If a user filter file is given (i.e. -T 6,filename), 
                       with a filename of $L$ caracters, $L$ lines are added 
                       to the array:
                       info[1,Number_of_bands + 4] = number of caracters of 
                                                    the filter file name
                        for i=Number_of_bands+4 to  Number_of_bands+4+L-1
                             info[0,i] = ascii number of the ith caracter.

             FROM    : 1D array (NbrBand); position of the first pixel 
             TO      : 1D array (NbrBand); position of the last pixel

             COEF    : 1D or 2D FLOAT array; wavelet coefficients
                       for non-redundant transform (13,14,15), it is a 1D array
                       for other transform, it is 2D array
                       class 1 and 5: coeff[*,i] = band i (i in [0..NbrBand-1])
                       class 2: coeff[0:to[i],i] = band i
                       class 3 and 4: coeff[from[i]:to[i]] = band i
 
         if BAND keyword is set, the array coef is also splitted into bands:
            BAND1   : band 1  
            BAND2   : band 2  
                      ...
            BANDi   : band i  
             

 EXTERNAL CALLS
           mr1d_trans (C++ program)

 EXAMPLE:
   > mr1d_trans, Signal, Result
   > plot, result.coef[*,1]
       Wavelet transform using the a-trous algorithm, and plot the second band

   > mr1d_trans, Signal, Result, /band
   > plot, result.band2
       Idem

   > mr1d_trans, Signal, Result, OPT='-t 13 -n 4'
   > B2First = result.from[1]
   > B2End = result.to[1]
   > plot, result.coef[B2First:B2End]
       Orthogonal wavelet transform with 4 scales, and plot the second scales

   > mr1d_trans, Signal, Result, OPT='-t 13 -n 4', /band
   > plot, result.band2
       Idem

   > mr1d_trans, Signal, Result, OPT='-t 8 -n 4'
   > B2First = 0
   > B2End = result.to[1]
   > plot, result.coef[B2First:B2End,1]
       Pyramidal median transform with 4 scales, and plot the second scales

 HISTORY:
       Written: Jean-Luc Starck 1998.
       July, 1998 File creation
;-
;+

 NAME:
        STAR1D

 PURPOSE:
       Computes the starlet transform of a signal. 
       The output is a 2D IDL array. Reconstruction can be done by simple 
        co-addition of all frames: Rec = total(TransSignal, 2)
       
 CALLING:

      TransSignal = STAR1D(Signal, Nscale=Nscale) 
       
 INPUTS:
     Signal -- 1D IDL array: signal we want to transform

 OUTPUTS:
     TransSignal -- 2D IDL array: Wavelet Transform
                                 TransSignal(i, *) = ith band of the 
                                                    wavelet transform
  
 KEYWORDS:
      Nscale -- int: Number of scales. Default is 4.
                     TransSignal is an array of Nscale signals: 
                                      TransSignal(0: Nscale-1, *)
			There is no test of the validity of the number of scales with respect
			to the size of the input images. 
 
 EXAMPLE:

       Compute the multiresolution of the signal I with default options
       (i.e. a starlet transform with 4 scales).  
               Output = stard1d_trans(I)

 REFERENCE:
    J.L. Starck and F. Murtagh, 
    "Image Restoration with Noise Suppression 
    Using the Wavelet Transform",
    Astronomy and Astrophysics, 288, pp-343-348, 1994.

 AUTHOR:
    J.L. Starck
    Service d'Astrophysique, Centre d'Etudes de SACLAY,
    Orme des Merisiers, 91191 GIF-Sur-YVETTE CEDEX, France 
    Email: jstarck@cea.fr        Tel:  +33 (0) 169 085 764
    http://jstarck.free.fr       Fax:  +33 (0) 169 086 577
;-
