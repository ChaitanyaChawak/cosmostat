%VERSION:2
23
350
0:BLACK_BODY
3846:CMB_L1_ALM_INPAINTING
5083:CMB_LOWL_ALM_INPAINTING
6640:CONVERSIONFACTOR
7878:DOTPRODUCT_SPHERE
8886:I_WHITENOISE
9485:MRS_FIND_OBJ
12238:MRS_GET_CL_THEO_POWSPEC
13665:MRS_GLS_INPAINTING
14835:MRS_GMCA
17239:MRS_MASK_EDGE
17674:MRS_PATCH_FIND_OBJ
20439:MRS_PK
21856:MRS_RESIZE_MASK_VEC
22674:MRS_TEMPLATE_FITTING
23974:MRS_TOUSI
25391:NUBNU_PLANCK
26282:PIX2ANG_NEST_OLDV2P20
27249:PLANCK_BNU
28018:PLANCK_MAKE_CMB_NG_CORREL_STAT
32692:PS_MASK
34873:READ_CAMBCL
35946:STAT_ANOMALIES
;+
     PLANCK returns the spectral radiance of a blackbody.

DESCRIPTION:  
    IDL function to return the spectral radiance of a blackbody,
    i.e. the Planck curve, in units of either MJy/steradian (I_nu)
    or watts/cm^2/steradian (nu_I_nu).
    The blackbody temperature and either frequency (in icm or GHz)
    or wavelength (in microns) are inputs to the function.  The
    routine also optionally returns the derivative with respect to 
    temperature, in units of MJy/sr/K or W/cm^2/sr/K.

CALLING SEQUENCE:  
     RESULT = PLANCK (temperature, nu_or_lambda [,dBdT] $
              [,UNITS=units], [/MJY], [/WCM2])

ARGUMENTS (I = input, O = output, [] = optional):
     RESULT        O   flt [arr]  Spectral radiance at each wavelength. 
                                  Units: W/cm^2/sr/K if /WCM2 specified
                                         MJy/sr      if /MJY specfied
     TEMPERATURE   I   flt        Temperature of blackbody, in K.
     NU_OR_LAMBDA  I   flt        Frequency or wavelength at which to 
                                  calculate spectrum. Units are as 
                                  specified with UNITS keyword.
     dBdT         [O]  flt [arr]  Derivative of Planck with respect to 
                                  temperature. 
     UNITS        [I]  str        'Microns', 'icm', or 'GHz' to 
                                  identify units of NU_OR_LAMBDA. Only 
                                  first character is required.  If 
                                  left out, default is 'microns'.
     /MJY          I   key        Sets output units to MJy/sr
     /WCM2         I   key        Sets output units to W/cm^2/sr

WARNINGS:
     1.  One of /MJY or /WCM2 MUST be specified.  
     2.  Routine gives incorrect results for T < 1 microKelvin and
            wavelengths shortward of 1.e-10 microns.  (So sue me).

EXAMPLE:
     To produce a 35 K spectrum in MJy/sr at 2, 4, 6, 8, 10 microns:

       wavelength = 2. + 2.*findgen(5)
       temp = 35.
       blackbody = planck(temp, wavelength, units='micron', /mjy)

     One could also get back the derivative by including it in the
     call:
       blackbody = planck(temp, wavelength, deriv, units='m', /mjy)
#
COMMON BLOCKS:
     None

PROCEDURE (AND OTHER PROGRAMMING NOTES): 
     Identifies units using the UNITS keyword, then converts the 
     supplied independent variable into microns to evaluate the 
     Planck function.  Uses Rayleigh-Jeans and Wien approximations 
     for the low- and high-frequency end, respectively.  Reference: 
     Allen, Astrophysical Quantities, for the Planck formula.

PERTINENT ALGORITHMS, LIBRARY CALLS, ETC.:
     None
  
MODIFICATION HISTORY:
    Written by Rich Isaacman, General Sciences Corp.  17 April 1991;     UNITS        [I]  str        'Microns', 'icm', or 'GHz' to 
                                  identify units of NU_OR_LAMBDA. Only 
                                  first character is required.  If 
    Revised by RBI 27 Jan 1992 to use updated fundamental constants 
         (SPR 9449)
    Revised by RBI 29 Jan 1992 to calculate derivatives only when 
         necessary
    Revised by RBI 3 Feb 1992 to redimension output to a scalar if only 
       a single wavelength is supplied  (SPR 9459)
    Revised by RBI 6 Mar 92 to return either MJy/sr or (!) W/cm^2/sr
    Revised by RBI 1 Jun 92 to fix single-wavelength failure when no
       derivative is requested (SPR 9738), and to use MESSAGE.
    RBI corrected error in derivative calculation SPR 9817 (17 Jul 92)
    RBI corrected error in Wien and RJ tails SPR 10392 (24 Dec 92)
	 but didn't get it quite right (Piper/Kryszak, 28-Dec-92)
    J.P. Bernard Changed the name from planck.pro into planck_function.pro, to
        avoid confusion with Astron library planck.pro

 SPR 9616
.TITLE
 Routine PLANCK
;-
;+
 NAME: 
       CMB_L1_ALM_INPAINTING

 PURPOSE:
        Apply an inpainting to a spherical map using the l_1 minimization of the spherical harmonics coefficients.
        If a mask is not provided, all pixels with a zero value are considered as missing pixels.
       If file names are given for the input image and mask, these two images are not loaded into IDL.

 CALLING:
     InpaintMap = cmb_l1_alm_inpainting(Imag, Mask=Mask, Niter=Niter, OutPowSpec=OutPowSpec, lmax=lmax, gauss=gauss)

 INPUTS:
     Imag -- IDL 1D array: Input Healpix image to be inpainted 
     
 OUTPUTS:
     InpaintMap -- IDL 1D array: Output inpainted Healpix image   
          
 INPUT KEYWORDS:
      niter: int: number of iterations used in the reconstruction
      FNin: Filename containing the input image. The input image won't be read.
      FNMask: Filename containing the mask. The mask won't be read.
      FNOut: Filename containing the results. By default, nothing is written on the disk.
      FNPS: Filename containing the mask. The mask won't be read.

 OUTPUT KEYWORDS:
     OutPowSpec: IDL 1D array: Cl of the inpainted map. 
       
 EXTERNAL CALLS:
      mrs_mca

 EXAMPLE:
      
 HISTORY:
       Written : Jean-Luc Starck   2009.
;-
;+
 NAME:  
       CMB_LOWL_ALM_INPAINTING

 PURPOSE:
        Inpaint a map and return its Alm coeff.
        Several regularization methods can be applied: Energy, sparsity or isotropy.
        This routine is optimized for low l (l < 50) inpainting. It has been test with map of size nside=32.
        All tests have been done using CMB maps in muK units.

 CALLING:
     InpaintAlm= cmb_lowl_alm_inpaiting(Imag, Mask, Niter=Niter, lmax=lmax, Energy=Energy, 
                                                  Sparsity=Sparsity, Isotropy=Isotropy, InpMap=InpMap, Prea=Prea, Cl=Cl) 
 INPUTS:
     Imag -- IDL 1D array: Input Healpix image to be inpainted 
     
 OUTPUTS:
     InpaintAlm -- IDL 1D array: Alm coeff of the inpainting map   
          
 INPUT KEYWORDS:
      Niter: int: number of iterations used in the reconstruction
      Lmax      : Number of spherical harmonics computed in the decomposition (default is 50)
      Energy    : Use a L2 regularization
      Sparsity   : Use a sparse regularization
      Isotropy   : Use an isotropy regularization
      Prea         : Estimated power spectrum of the unmasked data (used by Isotropy)
      Cl            : Theoretical Cl  (used by Energy constraint)

 OUTPUT KEYWORDS:
     InpMap: IDL Healpix map: Inpainted map. 
    
   EXTERNAL CALLS:
       mrs_alm_inpainting (C++ program) for isoptropie and Iterative Hard Thresholding.

 EXAMPLE:
     InpAlm =  cmb_lowl_alm_inpaiting(Map, Mask, /sparsity, InpMap=InpMap)
     mrs_tv, InpMap

 HISTORY:
       Written : Jean-Luc Starck   2012.
;-
;+
 NAME:
	conversionfactor

 PURPOSE:
       Delivers conversion factor between milli/mu K(antenna),
       milli/mu K(thermodynamic) and brightness MJy/sr. Grand-unified subroutine.      

 CALLING SEQUENCE:
 	A=conversionfactor(frequencies,/antenna2thermo)

 INPUTS:
      FREQUENCIES REAL ARRAY    List of frequencies (GHz).

 OPTIONAL INPUTS:

 OPTIONAL INPUT KEYWORDS:
      /brightness2mKthermo           Perform conversion MJy/sr -> mKthermo
      /brightness2mKantenna          MJy/sr -> mKantenna
      /mKthermo2brightness           mKthermo -> MJy/sr
      /mKantenna2brightness          mKantenna -> MJy/sr
      /brightness2muKthermo          Perform conversion MJy/sr -> muKthermo
      /brightness2muKantenna         MJy/sr -> muKantenna
      /muKthermo2brightness          muKthermo -> MJy/sr
      /muKantenna2brightness         muKantenna -> MJy/sr
      /antenna2thermo                Antenna -> thermodynamic
      /thermo2antenna                Thermodynamic -> antenna

 NOTES

 SIDE EFFECTS

 EXAMPLES
       Convert from antenna to thermodynamic units.

       correctionfactor=conversionfactor(70,/antenna2thermo)

 COMMONS USED : 

 PROCEDURES USED: 

 MODIFICATION HISTORY:
 	May 2006, Samuel Leach, SISSA
;-
;+
 NAME:
   dotproduct_sphere
 PURPOSE:
   Compute the cosign of the angle between two unit vectors on the
   sphere.  This formula is from Jackson, pg 101.  (Or see my notes
   of 6 Dec 92).  The angles must be in the following ranges:
     0 <= phi < 360
     0 <= theta <= 180
   where theta=0 corresponds to the N pole, and theta=180 is the S pole.
   If you want the dot product between RA and DEC coordinates,
   pass the following arguments (in radians):
     RA1, DEC1+90, RA2, DEC2+90

 CALLING SEQUENCE:
   dotproduct_sphere( phi1, theta1, phi2, theta2, [/degrees, /hrdeg] )

 INPUTS:
   phi1:       RA of first point(s) in radians
   theta1:     DEC of first point(s) in radians
   phi2:       RA of second point(s) in radians
   theta2:     DEC of second point(s) in radians

 OPTIONAL INPUTS:
   degrees:    If set, then all angles are in degrees
   hrdeg:      If se, then RA angles in hours and DEC angles in degrees

 OUTPUTS:
   cosgamma:   Cosine of the angle between the two positions
;-
;+
 NAME:
	I_WHITENOISE

 PURPOSE:
       Generates a white noise I map.

 CALLING SEQUENCE:
 	I_WHITENOISE, MAP, NSIDE, SIGMAPIX
                        

 INPUTS:
      NSIDE       INTEGER    Healpix NSIDE parameter.
      SIGMAPIX    REAL       Pixel RMS noise.      

 OPTIONAL INPUTS:
      HITMAP      ARRAY      Healpix hit map.
      SEED        INTEGER    Seed for random number generator.
      
 OPTIONAL INPUT KEYWORDS:

 NOTES

 SIDE EFFECTS

 EXAMPLES
 i_whitenoise, whitenoisemap,2048,1

 COMMONS USED : 

 PROCEDURES USED: 

 MODIFICATION HISTORY:
 	May 2006, Samuel Leach, SISSA
;-
;+
 NAME: 
       mrs_find_obj

 PURPOSE: 
       Detect the sources in  an image by using the Sextractor program 
       This routine is calling the binary  {sex}. 

 CALLING:
       PRO mrs_find_obj, imag, tabob, tabobj=tabobj, NbrObj=NbrObj, level=level, surf=surf, posneg=posneg, $
                            MaxRadiusDetection=MaxRadiusDetection, minfwhm=minfwhm, minmax=minmax, MaxSize=MaxSize, plot=plot

 INPUT:
       Imag: image 

 INPUT KEYWORDS:
        level: float -- Threshold level for the detection. Default value is 0.02
        surf: float -- Minimum surface an object detection. Default is 3 pixels. 
        posneg: Scalar -- if set, then negative object are also detected.   
        MaxRadiusDetection: scalar -- if set, only objects within a distance of  MaxRadiusDetection from the center are detected.  
        minfwhm: float -- Minimum Full width at half maximum for an object 
        minmax: float -- All object with a maximum value smaller that minmax are not considered.
        MaxSize: float -- maximum size for an object. 
        plot: scalar -- if set, display the image with ellipses overplotted around the detected sources.

 OUTPUT KEYWORDS:
      NbrObj: number of detected objects

 OUTPUTS:
           tabobj: IDL structure which contains the information about 
              the objects. For each object, we have
                NUMBER          LONG             Onject number
                X               FLOAT            X position
                Y               FLOAT            Y position
                Face            int              Face number
                Theta           float            Theta coordinate
                Phi             float            Phi Coordinate
                SGN             INT              Sig +1 if the structure is positive, -1 otherwise
                MAXVAL          FLOAT            Maximum value of the object
                FLUX            FLOAT            Pixel values integration inside the object
                FWHM            FLOAT            Full width at half maximum
                AXIS_A          FLOAT            Axis A of the ellipse
                AXIS_B          FLOAT            Axis B of the ellipse
                ANGLE           FLOAT            Orientation
                AREA            FLOAT            Surface
                ELLIPTICITY     INT              Ellipticity

 EXTERNAL CALLS:
           Binary sex of Sectractor software

 EXAMPLE:
           detection in an image with all default options 
                find_obj, Imag, TabObj
      
                find_obj, Imag, TabObj, Level=0.2, Surf=3, MaxRadiusDetection=300, minfwhm=0, minmax=0, MaxSize=30, / posneg, /plot

 HISTORY:
	Written: Jean-Luc Starck 2006
;-
;+
 NAME:
        mrs_get_cl_theo_powspec

 PURPOSE:
  Apply a sparse denoising on a spectrum using wavelets, DCT and variance stabilisation.
  If a noise power spectrum is given, then the output denoised power spectrum will take it into account.
  By default, the Cl starts at l=0. If the input keyword NoMonoDip is set, then the input Cl[0] corresponds to l=2.

 CALLING:
     DenCl = mrs_get_cl_theo_powspec(Cl,  Niter=Niter, NScale=NScale, Nsigma= Nsigma, NoisePs=NoisePs, DenNoisePS=DenNoisePS, NoMonoDip=NoMonoDip)

 INPUTS:
     DenCl -- IDL 1D array = Cl array to denoise  of a healpix map: Input image to be eroded 
    
 OUTPUTS:
     DenCl -- IDL 1D array  = Denoised Cl array

 INPUT KEYWORD: 
     Niter: int  = Number of iterations, default is 50.
     Nsigma: float = Detection level. Default is 7.
     NoisePS: IDL 1D array  = input noise power spectrum.

 OUTPUT KEYWORD: 
     DenNoisePS: IDL 1D array  = output denoised noise power spectrum

 EXAMPLE:
      Remove the noise from a CMB power spectrum.
      Denoised_Cl =  mrs_get_cl_theo_powspec(Cl)

      Remove the noise from a CMB power spectrum, taking into account Cosmic Variance + Instrumental noise
      DenNoisePS will contains the denoised spectrum of the instrumental noise.
      Denoised_Cl =  mrs_get_cl_theo_powspec(Cl, NoisePS=NoisePS, DenNoisePS=DenNoisePS)
         
 HISTORY:
       Written: Paniez  Paykari & Jean-Luc Starck, 2011
;-
;+
 NAME:  
       mrs_gls_inpainting

 PURPOSE:
        To compute the GLS solution for real spherical harmonic multipoles using multistep gradient descent (Nesterov scheme).
;        This routine is optimized for low l (l < 50) inpainting. It has been test with map of size nside=32.
        All tests have been done using CMB maps in muK units.
function mrs_gls_inpainting, Dat, Mask, Niter=Niter, lmax=lmax, cl=cl,  AlmRes= AlmRes,  verb=verb

 CALLING:
     InpaintMap= mrs_gls_inpainting(Imag, Mask, Niter=Niter, lmax=lmax,  AlmRes = AlmRes, Cl=Cl) 

 INPUTS:
     Imag -- IDL 1D array: Input Healpix image to be inpainted 
     
 OUTPUTS:
     InpaintMap -- IDL 1D array: Output inpainted map   
          
 INPUT KEYWORDS:
      Niter: int: number of iterations used in the reconstruction
      Lmax      : Number of spherical harmonics computed in the decomposition (default is 50)
      Cl            : Theoretical Cl  (used by Energy constraint)

 OUTPUT KEYWORDS:
     AlmRes: Alm coefficients of the inpainted map.
    
 EXAMPLE:
     InpMap =  mrs_gls_inpainting(Map, Mask, Cl=Cl)
     mrs_tv, InpMap

 HISTORY:
       Written : Florent Sureau,   2012.
;-
;+
 NAME:
      mrs_gmca
	
 PURPOSE:
	 Apply the blind component separation method called GMCA on spherical maps using Healpix representation (NESTED format) with the orthogonal wavelet transform on the sphere.
		
 CALLING:
	mrs_gmca, Data, NbrSource, RecSource, MixintMat, NbrIter, NbrScale=NbrScale, A0=A0, VARMEAN=VARMEAN, 
			SpecConst=SpecConst, ForceGalactic=ForceGalactic, DustAlmConst=DustAlmConst, SyncAlmConst=SyncAlmConst, GMCA_mask=GMCA_mask

 INPUTS:
   Data -- 2D IDL float array: Multichannel data on the Sphere (Healpix nested format). Data[*,i] is the ith channel.
   NbrSource -- int: Number of sources. The number of source must be smaller or equal to the number of channels
   NbrIter -- int: Number of iterations

 OUTPUTS:
   RecSource -- 2D IDL float array: Multichannel reconstructed sources. RecSource[*,i]  (i=0,NbrSource-1) is the ith sources
   MixintMat -- 2D IDL float array: Estimated mixing matrix ( Data = MixintMat # RecSource ).
                                    MixintMat is of size NumberChannels x NbrSource ( MixintMat[0:NumberChannels-1, 0:NbrSource-1] )
             
  INPUT KEYWORDS:
   SpecConst -- 2D IDL float array  : Initial mixing matrix with CMB and SZ spectral contraints
   NbrScale -- int : Number of scales (default is 4) in the wavelet transform.
	VARMEAN	 -- 2D IDL float array : noise covariance matrix given on input, if not set, it is assumed it is identity matrix
   A0: 1D IDL float array [0..NumberChannels-1] : if set, then the first column of the matrix is considered
                               as known and does not need to be estimated. We have MixintMat[*, 0] = A0
   ForceGalactic : if SpecConst is set, it fixes the vales of the Dust and Synchrotron spectra 
   DustAlmConst : if set, it constraints the first 769 alm  coefficients of the 2nd estimated sources (being the estimated dust)
   SyncAlmConst : if set, it constraints the first 769 alm  coefficients of the 3rd estimated sources (being the estimated synchrotron)
   GMCA_mask : if set the input data are masked

 EXTERNAL CALLS:
       mrs_owttrans  
   	get_all_faces
   	mrs_allbandcleaning_perband
   	put_all_faces

 EXAMPLE:
       Compute the GMCA on a 2D data set considering 4 sources, 100 iterations and 5 wavelet scales
          mrs_gmca, Data, 4, Sources, mat, 100, NbrScale=5
         
 HISTORY:
	Written: Jerome Bobin, 2007
	April, 2007 File creation
;-
;+
 NAME:
        mrs_mask_edge

 PURPOSE:
     Estimates the edge of the input mask.

 CALLING:
     edge = mrs_mask_edge(mask)

 INPUTS:
     mask       -- Healpix map = mask composed of zeros and ones.
    
 OUTPUTS:
     edge       -- Healpix map = map containing ones where the edge
                   of the input mask is.
 EXAMPLE:
      edge = mrs_mask_edge(mask)
         
 HISTORY:
       Written:  Aurele Balavoine, 2012
;-
;+
 NAME: 
       mrs_patch_find_obj

 PURPOSE: 
       Detect the sources in  an image by using the Sextractor program 
       This routine is calling the binary  {sex}. 

 CALLING:
       PRO mrs_patch_find_obj, imag, tabob, tabobj=tabobj, NbrObj=NbrObj, level=level, surf=surf, posneg=posneg, $
                            MaxRadiusDetection=MaxRadiusDetection, minfwhm=minfwhm, minmax=minmax, MaxSize=MaxSize, plot=plot

 INPUT:
       Imag: image 

 INPUT KEYWORDS:
        level: float -- Threshold level for the detection. Default value is 0.02
        surf: float -- Minimum surface an object detection. Default is 3 pixels. 
        posneg: Scalar -- if set, then negative object are also detected.   
        MaxRadiusDetection: scalar -- if set, only objects within a distance of  MaxRadiusDetection from the center are detected.  
        minfwhm: float -- Minimum Full width at half maximum for an object 
        minmax: float -- All object with a maximum value smaller that minmax are not considered.
        MaxSize: float -- maximum size for an object. 
        plot: scalar -- if set, display the image with ellipses overplotted around the detected sources.

 OUTPUT KEYWORDS:
      NbrObj: number of detected objects

 OUTPUTS:
           tabobj: IDL structure which contains the information about 
              the objects. For each object, we have
                NUMBER          LONG             Onject number
                X               FLOAT            X position
                Y               FLOAT            Y position
                Face            int              Face number
                Theta           float            Theta coordinate
                Phi             float            Phi Coordinate
                SGN             INT              Sig +1 if the structure is positive, -1 otherwise
                MAXVAL          FLOAT            Maximum value of the object
                FLUX            FLOAT            Pixel values integration inside the object
                FWHM            FLOAT            Full width at half maximum
                AXIS_A          FLOAT            Axis A of the ellipse
                AXIS_B          FLOAT            Axis B of the ellipse
                ANGLE           FLOAT            Orientation
                AREA            FLOAT            Surface
                ELLIPTICITY     INT              Ellipticity

 EXTERNAL CALLS:
           Binary sex of Sectractor software

 EXAMPLE:
           detection in an image with all default options 
                find_obj, Imag, TabObj
      
                find_obj, Imag, TabObj, Level=0.2, Surf=3, MaxRadiusDetection=300, minfwhm=0, minmax=0, MaxSize=30, / posneg, /plot

 HISTORY:
	Written: Jean-Luc Starck 2006
;-
;+
 NAME:
        mrs_tousi

 PURPOSE:
  Apply a sparse denoising on a spectrum using wavelets, DCT and variance stabilisation.
  If a noise power spectrum is given, then the output denoised power spectrum will take it into account.
  By default, the Cl starts at l=0. If the input keyword NoMonoDip is set, then the input Cl[0] corresponds to l=2.

 CALLING:
     DenCl = mrs_tousi(ClSpec, [ClCrosSPec, ] Niter=Niter, NScale=NScale, Nsigma= Nsigma, NoisePs=NoisePs, DenNoisePS=DenNoisePS, NoMonoDip=NoMonoDip)

 INPUTS:
     DenCl -- IDL 1D array = Cl array to denoise  of a healpix map: Input image to be eroded 
    
 OUTPUTS:
     DenCl -- IDL 1D array  = Denoised Cl array

 INPUT KEYWORD: 
     Niter: int  = Number of iterations, default is 50.
     Nsigma: float = Detection level. Default is 7.
     NoisePS: IDL 1D array  = input noise power spectrum.

 OUTPUT KEYWORD: 
     DenNoisePS: IDL 1D array  = output denoised noise power spectrum

 EXAMPLE:
      Remove the noise from a CMB power spectrum.
      Denoised_Cl =  mrs_get_cl_theo_powspec(Cl)

      Remove the noise from a CMB power spectrum, taking into account Cosmic Variance + Instrumental noise
      DenNoisePS will contains the denoised spectrum of the instrumental noise.
      Denoised_Cl =  mrs_get_cl_theo_powspec(Cl, NoisePS=NoisePS, DenNoisePS=DenNoisePS)
         
 HISTORY:
       Written: Paniez  Paykari & Jean-Luc Starck, 2011
;-
;+
 NAME:
        mrs_resize_mask_vec

 PURPOSE:
     Compute extended versions of the input mask.

 CALLING:
     rmask = mrs_resize_mask_vec(mask, daddpix, maskEdge=maskEdge)

 INPUTS:
     mask       -- Healpix map = mask composed of zeros and ones.
     daddpix    -- IDL intarr = number of pixels the mask must be
                   extended of.
    
 OUTPUTS:
     rmask      -- IDL intarr(npix,max(daddpix)) = contains the
                   resized masks for each integer in daddpix, stored
                   at the corresponding index.

 INPUT KEYWORDS:
     maskEdge    : Healpix map = map containing ones where the edge
                   of the input mask is (for faster resizing only).

 EXAMPLE:
      rmask = mrs_mask_edge(mask, [3,6,10])
         
 HISTORY:
       Written:  Aurele Balavoine, 2012
;-
;+
 NAME:
        mrs_template_fitting

 PURPOSE:
	It aims at solving a template fitting problem on the sphere

 CALLING:

	mrs_template_fitting,map,template,BS=BS,NbrScale=NbrScale,alpha = alpha
    
 INPUT:
     	map -- IDL array of healpix map: Input image 
	  	template -- IDL array of healpix map : Template image

 OUTPUT:
     	Image obtained by fitting (i.e. regression coefficients x template)

 INPUT KEYWORDS:
		NbrScale -- scalar: number of wavelet scales used for analysis - default is 4
		BS -- scalar: minimal patch size used to compute the noise variance - default is 16
		denoise -- scalar : if set, it does not perform fitting when noise dominates at level denoise x sigma_noise (e.g. put denoise = 3 or more)
		mask -- IDL array : binary mask to neglect some pixel when computing the regression coefficient at large scale
       scale_coarse -- scalar : scale at which the large scale regression coefficient should be estimated
		positive -- binary : if set the regression coefficients are forced to be positive

 OUTPUT KEYWORDS:
		alpha -- IDL array of healpix map: regression coefficients per scale

 EXAMPLE:
       fImage = mrs_template_fitting(Imag,template,BS=8,NbrScale=5,alpha = alpha)
         
 HISTORY:
	Written: Jérôme Bobin, 2012
	September, 2012 File creation

;-
;+
 NAME:
        mrs_tousi

 PURPOSE:
  Apply a sparse denoising on a spectrum using wavelets, DCT and variance stabilisation.
  If a noise power spectrum is given, then the output denoised power spectrum will take it into account.
  By default, the Cl starts at l=0. If the input keyword NoMonoDip is set, then the input Cl[0] corresponds to l=2.

 CALLING:
     DenCl = mrs_tousi(ClSpec, [ClCrosSPec, ] Niter=Niter, NScale=NScale, Nsigma= Nsigma, NoisePs=NoisePs, DenNoisePS=DenNoisePS, NoMonoDip=NoMonoDip)

 INPUTS:
     DenCl -- IDL 1D array = Cl array to denoise  of a healpix map: Input image to be eroded 
    
 OUTPUTS:
     DenCl -- IDL 1D array  = Denoised Cl array

 INPUT KEYWORD: 
     Niter: int  = Number of iterations, default is 50.
     Nsigma: float = Detection level. Default is 7.
     NoisePS: IDL 1D array  = input noise power spectrum.

 OUTPUT KEYWORD: 
     DenNoisePS: IDL 1D array  = output denoised noise power spectrum

 EXAMPLE:
      Remove the noise from a CMB power spectrum.
      Denoised_Cl =  mrs_get_cl_theo_powspec(Cl)

      Remove the noise from a CMB power spectrum, taking into account Cosmic Variance + Instrumental noise
      DenNoisePS will contains the denoised spectrum of the instrumental noise.
      Denoised_Cl =  mrs_get_cl_theo_powspec(Cl, NoisePS=NoisePS, DenNoisePS=DenNoisePS)
         
 HISTORY:
       Written: Paniez  Paykari & Jean-Luc Starck, 2011
;-
;+
=-----------------------------------------------------------------------------
 NAME:   
     NUBNU_PLANCK
 PURPOSE:
   Computes Planck function as NuBnu in Wm-2sr-1
	or SZ or dT/T distortion
 CALLING SEQUENCE:
   NUBNU_PLANCK, LAMBDA, TEMP, SPECTRUM, [YSZ= YSZ], [DT_T= DT_T]
 INPUTS:
   LAMBDA	: wavelength vector IN Meters
   TEMP	: Temperature vector in Kelvin
 OPTIONAL INPUT:
 KEYWORD INPUT : 
   YSZ		: if present compute the Sunyaev-Zeldovich distortion
   DT_T	: if present compute the deltaT/T type of distortion
 OUTPUTS:
   SPECTRUM	: Brightness vector per log frequency, NuBnu in Wm-2sr-1
 SIDE EFFECT:
 RESTRICIONS:
   Either LAMBDA or TEMP can be a vector, not both
 PROCEDURE CALLS:
 HISTORY:
	08-jun-1993	version 1 FXD IAS
	16-jan-1994	V1.1	  FXD IAS  Correct the case where T is a vector
=-----------------------------------------------------------------------------
;-
;+
 PIX2ANG_NEST, nside, ipix, theta, phi

       renders Theta and Phi coordinates of the nominal pixel center
       given the NESTED scheme pixel number Ipix and map resolution parameter Nside

 INPUT
    Nside     : determines the resolution (Npix = 12* Nside^2),
       should be a power of 2
	SCALAR
    Ipix  : pixel number in the NESTED scheme of Healpix pixelisation in [0,Npix-1]
	can be an ARRAY 

 OUTPUT
    Theta : angle (along meridian = co-latitude), in [0,Pi], theta=0 : north pole,
	is an ARRAY of same size as Ipix
    Phi   : angle (along parallel = azimut), in [0,2*Pi]
	is an ARRAY of same size as Ipix

 SUBROUTINE
    nside2npix

 HISTORY
     Feb 1999,           Eric Hivon,               Caltech
    Sept 2000,          EH
           free memory by discarding unused variables
    June 2003,  EH, replaced STOPs by MESSAGEs
    Oct 2006, EH, IAP, enabled nside > 8192
    Aug 2008, EH, IAP: issues warning if ipix is not of integer type

;-
;+
 NAME:
      PLANCK_BNU
 PURPOSE:
      Compute Planck blackbody spectrum (W/m2/sr/Hz) at given
      frequencies nu for a given temperature temp (CMB temperature 
      of !const.tcmb by default)    
 CALLING SEQUENCE:
      result = PLANCK_BNU(nu, temp=temp)
 INPUT:
      nu : frequencies in Hertz, may be an array
 OUTPUT:
      Planck spectrum at frequencies nu
 KEYWORDS:
      temp: temperature of the blackbody
 RESTRICTIONS:
       system variable giving physical constant !const.tcmb needed
       Not fully tested yet. Report any bugs to Jacques Delabrouille
       j.delabrouille@cdf.in2p3.fr
 PROCEDURES CALLED:
       none
 REVISION HISTORY
       Written, Jacques Delabrouille July 1999
	Name changed from JD_BNU to PLANCK_BNU by JD, February 2006
;-
;+
 NAME:
      planck_make_cmb_ng_correl_stat
	
 PURPOSE:
	 Apply a set of statistics (Skewness, Kurtosis, Cumulant of order 5 and 6, min, max, Higher Criticism)  on the PLANCK CMB Map. per wavelet scale and per latiude band
    if Mask keyword is et , the statistics at each wavelet scales are calculated only inside the mask.
    if /Correl  is set, then  calculate the correlation per wavelet scale and per latitude band with three template  = ['Haslam 408 MHz', 'Free Free', 'IRAS 100 µm', ' 'Velocity Integrated CO Map (Dame)']
           File names are $ISAP/data/CMB/ForegroundTemplate/408MHz_512.fits
                                $ISAP/data/CMB/ForegroundTemplate/Halpha_256.fits"
                                $ISAP/data/CMB/ForegroundTemplate/IRIS_100micron_mKAntenna.fits"
                                $ISAP/data/CMB/ForegroundTemplate/lambda_wco_dht2001

    if /Isotrop is set,  isotropy tests are performed.
    if /Curvelet is set, curvelet statistics are calculated (Skewness, Kurtosis, Cumulant of order 5 and 6, min, max, Higher Criticism).
    if /DWTTrans is set, Bi-orthogonal WT per Healpix face statistics are calculated  (Skewness, Kurtosis, Cumulant of order 5 and 6, min, max, Higher Criticism).
    if /PSStat is set, Statistics inside the mask of point sources are calculted
                                $ISAP/data/CMB/ForegroundTemplate/planck_point_sources_mask.fits"
    if /SZStat is set, Statistics inside the mask of SZ clusters are calculted
                                $ISAP/data/CMB/ForegroundTemplate/ERCSC_SZ_mask_rad1x5arcmin.fits"
		
 CALLING:
	 AllStat = planck_make_cmb_ng_correl_stat(CMBMap,  Mask=Mask, Name=Name, WTemplate_1=WTemplate_1, WTemplate_2=WTemplate_2, WTemplate_3=WTemplate_3,  WTemplate_4=WTemplate_4, NbrLat=NbrLat, $ 
         NbrScale=NbrScale, DWTNbrScale=DWTNbrScale, CurNbrScale=CurNbrScale, Isotrop=Isotrop, correl=correl, Curvelet=Curvelet , DWTTrans=DWTTrans, PSStat= PSStat, SZStat=SZStat)

 INPUTS:
   CMBMap -- Healpix Map: CMB map to analyze

 OUTPUTS:
   AllStat --  StatData = {Correl1: Correl1,   --  Correlatation IDL structure relatve to template 1  (Haslam),  see mrs_wt_correlate.pro for more details
                                    Correl2: Correl2, ,   -- Correlatation IDL structure relatve to template 2  (Free-Free)
                                    Correl3: Correl3,    -- Correlatation IDL structure relatve to template 2   (IRAS)
                                    StatIWT:StatIWT,  --  Undecimateded Wavelet Transform statistics. , see mrs_allstat.pro for more details
                                    StatDWT:StatDWT,  -- Bi-orthogonal WT per Healpix face statistics
                                    StatCUR:StatCUR,    -- Curvelet statistics
                                    StatPS:StatPS,         -- Statistics inside the mask of point sources
                                    StatSZ:StatSZ,        --  Statistics inside the mask of SZ clusters/
                                    TabNameTemplate:TabNameTemplate,   -- Name of the templates
                                    Isotropy: Iso           -- Isotropy statistics
 }  
             
  INPUT KEYWORDS:
   Mask -- Healpix map  : mask of valid pixels to be used for the statistics calculation.
   Name -- Name: Name of the CMB map
   WTemplate_1 -- IDL Stucture: Wavelet transform of the first template
   WTemplate_2 --  IDL Stucture: Wavelet transform of the second template
   WTemplate_3 --  IDL Stucture: Wavelet transform of the third template
   WTemplate_4 --  IDL Stucture: Wavelet transform of the fourth template
   NbrLat -- number of latitude bands. Default is 25.
   NbrScale -- int : Number of scales (default is 10) in the undecimated wavelet transform.
	DWTNbrScale-- int : Number of scales (default is 7) in the bi-orthogonal wavelet transform per healpix face.
	CurNbrScale-- int : Number of scales (default is 7) in the curvelet transform.
   Isotrop -- int: if set, isotropy statistics are calculated
   correl -- int: if set, correlation statistics are calculated
   Curvelet -- int: if set, curvelet statistics are calculated
   DWTTrans -- int: if set, bi-orthogonal wavelet transform statistics are calculated
   PSStat -- int: if set, Point source  statistics are calculated
   SZStat -- int: if set, SZ clusters  statistics are calculated

 EXTERNAL CALLS:
       mrs_wt_correlate  
   	mrs_allstat
 EXAMPLE:
        Compute the statistics of the undecimated walelet transform and the correlation with the templates
        Stat = planck_make_cmb_ng_correl_stat(CMBMap, Mask=Mask, /Correl, /PSStat, /SZStat)
         
 HISTORY:
	Written: Jean-Luc Starck, 2011
;-
;+
 NAME:
    ps_mask
 PURPOSE:
    Computes a mask map of PS brigther than Slim at a given frequency
 CALLING SEQUENCE:
    ps_mask, freq, Slim,[nside=nside, gb=gb, n_sigma=n_sigma, n_sigma_P=n_sigma_P, fwhm=fwhm]
 INPUT PARAMETERS:
    freq  = frequency at which calculation is to be done [GHz]
    Slim  = PS brighter than this flux limits are masked [mJy]
 OPTIONAL INPUT PARAMETERS
	 nside=  To use a different nside of the choosen frequency
        gb = To consider only PS at /Glat/>gb [degree]
        n_sigma_T, n_sigma_P = If set, Slim is ignored and recomputed
        corresponding to n_sigma_T * sigma_T or n_sigma_P * sigma_P
        where sigma_T or sigma_P is the cmb rms at frequency=freq in
        total or polarized intensity, respectively;
        the cmb sigma_T and sigma_P at nside=2048 are those of the Planck
        reference sky emission available at www.sissa.it/~planck/reference_sky/CMB/;
        at nside<2048, they are evaluated using the HEALPix ud_grade routine
	 fwhm= To use a different fwhm of the choosen frequency [arcmin]
 OUTPUT:
       A FITS file with a Mask (pixels around 2 beam-size of a PS
       brigter than Slim has value 0 and 1 otherwise) at the choosen frequency
 EXAMPLES:
     Mask at 70 GHz with PS>200 mJy

     	        ps_mask,70.,200.

     Mask at 217 GHz with PS>500 mJy and /Glat/>5deg

     	        ps_mask,217.,500.,gb=5

     Mask at 30 GHz for S>1000 mJy and nside 2048

     	        ps_mask,30.,1000.,nside=2048.

     Mask at 100 GHz for cut at 5 times the sigma of CMB and nside 2048

     	        ps_mask,30.,1000.,nside=2048.,n_sigma=5

     Mask at 217 GHz for S>1000 mJy and fwhm=7.1'

     	        ps_mask,217.,1000.,fwhm=7.1

 REVISION HISTORY:
    July 28, 2006, edited to match the format of the working group 2
    CMB and foreground template repository, prepared by Joaquin
    Gonzalez-Nuevo
    Agoust 8, 2006, n_sigma optional input added by Carlo Baccigalupi
    Septembre 1, 2006, fwhm optional input added by Joaquin Gonzalez-Nuevo
    September 6, 2006, fwhm info added in the output file name by F. Stivoli
    October 3, 2006, BUG corrected: ARs is not in seconds but in deci-seconds
;-
;+
 NAME: 
       read_cambcl

 PURPOSE: 
      read the Cl from a file in Camb format. 

 CALLING:
      Cl = read_cambcl(FileName, ell=ell, LL1=LL1, nomonodip=nomonodip)

 INPUT:
       FileName: File Name 

 INPUT KEYWORDS:
        LL1: scalar --  the returned Cl are multiplied by l(l+1)/2PI, i.e. as in standard CAMB output
        nomonodip: scalar -- remove the monopole and the dipole, i.e. as in standard CAMB output
                             otherwise add the C_0 and C_1 values.

 OUTPUT KEYWORDS:
      Ell: IDL 1D array:  l values related to the CL

 OUTPUTS:
           Cl: IDL 1D array -- Cl values

 EXTERNAL CALLS:

 EXAMPLE:
           Cl = read_cambcl(FileName)
            
           Cl = read_cambcl(FileName, /LL1, /nomonodip)
           ; Read the ouput CAMB exactly as it is (without adding a monopole and a dipole and without renormalization with l(l+1)/2PI).

 HISTORY:
	Written: Jean-Luc Starck 2013
    January 2014 - Update the default Cl to Planck-PR1 official Cl best fit (/planck_lowl/base_planck_lowl.bestfit_cl  in ESA Planck PAIO)
;-
;+
 NAME:
        stat_anomalies

 PURPOSE:
   Computes statistical anomalies in a CMB map. 

 CALLING:
     AlmANO = cmb_anomalies(Data, lmax=lmax, nsideRot=nsideRot)

 INPUTS:
     Data -- IDL array of healpix map : Input image to be analyzed 
    
 OUTPUTS:
     AlmANO -- IDL structures with the following fields: 
					MapName -- string : map name 
			        lmax -- integer : lmax used in analysis
					N -- interger: number of rotations
					Res_LowQuadrupole -- IDL structure: results for the low quadupole analysis
					Res_QuadOctAlignment -- IDL structure: results for the Quad-Oct alignement analysis
					Res_PlanarOctopole -- IDL structure: results for the Oct opole Planarity analysis

 INPUT KEYWORDS:
      lmax       :  integer -- lmax value in the analysis
      nsideRot      :   resolution for angle rotations. Number of rotations is nsideRot^2*12

 EXTERNAL CALLS:
       

 EXAMPLE:
       Compute the anomalies for a number of rotations correcponding to nsideRot^2*12
        AlmANO = cmb_anomalies(Data, lmax=8, nsideRot=256)
;         
 HISTORY:
       Anais Rassat & Jean-Luc Starck, 2013
       May, 2013 File creation
;-
