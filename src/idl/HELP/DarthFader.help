%VERSION:2
7
107
0:DARTH_FADER
633:DF_DEL_BASELINE
1404:DF_GET_EIGENVECTOR
2655:DF_GET_REDSHIFT
4063:DF_GET_SPECTRA_COMPONENTS
5780:DF_INPUT_PARAMS
8457:DF_PEAKS
;+
 NAME:
        darth_fader.pro

 PURPOSE:
    Run the Darth Fader pipeline

 INPUTS: 
    Input options are specified in df_input_params.pro

 OUTPUTS: 
    
    Eigentemplates computed from a training set
    Components of test spectra (continua and line features)
    Redshift estimates for test galaxies
    Catalogue cleaned according to feature counting criterion
    Table of peak counts for each galaxy as S_TabPeaks.allpeaks
    S_TabPeaks.empeaks and S_TabPeaks.abspeaks. 
    Input data
    Input training set
    Input training set after continuum-subtraction
 
 HISTORY: 
       Written: Adrienne Leonard, Oct 2013
;-
;+
 NAME:
        df_del_baseline

 PURPOSE:
   Remove the baseline from a spectrum or an array of spectra

 CALLING:
     TabSpectra_noBaseline =  df_del_baseline(TabSpectra, RMS=RMS,
     nscale=nscale, baseline = baseline)

 INPUTS:
     TabSpectra -- IDL 1D or 2D array :  TabSpectra[*, 0:N-1]   N input spectra
    
 OUTPUTS:
     TabSpectra_noBaseline --   IDL 1D or 2D array :  TabSpectra_noBaseline[*, 0:N-1]   N spectra without baseline

 INPUT KEYWORDS:
  nscaale -- scalar : number of scales used in the decomposition. Default is 6.

 EXAMPLE:
       Remove the baseline of all spectra
               TabSpectra_noBaseline =  del_baseline(TabSpectra, RMS=RMS) 
         
 HISTORY:
	Written: Daniel Machado & Jean-Luc Starck, 2013
	Sept, 2013 File creation

;-
;+
 NAME:
        df_get_eigenvector

 PURPOSE:
   Computes the main eigen vector of a galaxy spectra training set

 CALLING:
     Template =  df_get_eigenvector(Training,  AllEigen=AllEigen,
     Denoising=Denoising, OptDen=OptDen, EnergPercent=EnergPercent, NTemp=Ntemp)

 INPUTS:
     Training -- IDL 2D array :  Training[*, 0:N-1]   N spectra
    
 OUTPUTS:
     Template -- IDL 2D array :  Template[*, 0:T-1]   T spectra
                 template. Relevant template which contain EnergPercent% of the energy of the data.

 INPUT KEYWORDS:
  Denoising -- Scalar:  if set, a denoising is applied on each spectrum
  OptFil -- String : option used for the sdenoiing
  EnergPercent -- double: percentage energy used to define the
                  relevant eigenvectors. Default is 99.93%.
  Ntemp -- number of templates to be returned. This overrides
           EnergPercent and returns the specified number of templates

 KEYWORDS:
      AllEigen   - IDL 2D array :  AllEigen[*, 0:N], all template

 EXAMPLE:
       Compute the spherical harmonix transform of an image. 
        The result is stored in Output
               mrs_trans, Imag, Output 
         
 HISTORY:
	Written: Daniel Machado & Jean-Luc Starck, 2013
	Sept, 2013 File creation

;-
;+
 NAME:
        df_get_redshift
;
 PURPOSE:
       Calculate the redshifts of a spectra or an array of spectra, using an array of templates. For a large number of spectrum, it is better to call the routine
       

 CALLING:
     Redshift =  df_get_redshift(Spectrum_or_TabSpectrum, TabTemplate,  lstep= lstep, shiftpar=shiftpar, InfoTemp=InfoTemp)

 INPUTS:
     Spectrum_or_TabSpectrum -- IDL 1D or 2D array :  input Spectra or  TabSpectra[*, 0:N]   N input spectra
     TabTemplate-- IDL  2D array :   inpute template TabTemplate[*,0:T] 
    
 OUTPUTS:
     Redshift -- double or  IDL 1D array :  redshift of the N spectra

 INPUT KEYWORDS:
  lstep -- double : this value is the width of a single pixel on the log-lambda axis; SDSS call this 'Log10 dispersion per pixel'
  shiftpar -- int: difference in pixels between the end of the template and the end the input spectrum

 INPUT/OUTPUT KEYWORDS:
;   InfoTemp -- IDL structure: if the routine is called many thimes with the same templates and the same kind of spectrum (i.e. wavelength range, number of pixels, etc),
;                        then temporaty array are stored in InfoTemp that can be reused for the next call.

 EXAMPLE:
       Calculate the redshidt of a of spectra
               TabRedshift =  df_get_redshift(TabSpectra, TabTemplate)
         
 HISTORY:
	Written: Daniel Machado & Jean-Luc Starck, 2013
	Sept, 2013 File creation

;-
;+
 NAME:
        df_get_spectra_components

 PURPOSE:
   Decompose a spectrum or an array of spectra into several components (i.e. emission lines, absorption lines, baseline, noise)

 CALLING:
     DecSpectra =  df_get_spectra_components(TabSpectra, RMS=RMS, nscale=nscale, nsigma=nsigma)

 INPUTS:
     TabSpectra -- IDL 1D or 2D array :  TabSpectra[*, 0:N-1]   N input spectra
    
 OUTPUTS:
     DecSpectra -- IDL structure : decomposition of all specrta
                                   BASELINE   - IDL Array[*, 0:N-1]   :   baseline or continuum
                                   POSLINE    - IDLArray[*, 0:N-1]     :   emission lines
                                   NEGLINE   - IDLArray[*, 0:N-1]     : absorption lines
                                   NOISE   - IDLArray[*, 0:N-1]         : noise[*,i]  = TabSpectra[*,i] - (BASELINE[*,i]+ POSLINE[*,i] + NEGLINE[*,i])
                                   DATA_NOBASELINE   - IDLArray[*, 0:N-1] :   data_nobaseline[*,i]  = TabSpectra[*,i] - (BASELINE[*,i]
                                   DATA_CLEAN   - IDLArray[*, 0:N-1]  :  data_clean[*,i] = POSLINE[*,i] + NEGLINE[*,i]

 INPUT KEYWORDS:
  RMS -- IDL 1D array:  noise rms per pixel
  nscale -- scalar : number of scales used in the decomposition. Default is 6.
  nsigma -- double:  detection level in the FDR. nsigma=2 by default, corresponding to alpha_FDR = 0.05, i.e. 5% of detections may be false detections.

 EXAMPLE:
       Decompose all spectra in  TabSpectra, assuming the noise per pixel is given by RMS[0:Npix]
               DecSpectra =  df_get_spectra_components(TabSpectra, RMS=RMS) 
         
 HISTORY:
	Written: Daniel Machado & Jean-Luc Starck, 2013
	Sept, 2013 File creation

;-
;+
 NAME:
        df_input_params.pro

 PURPOSE:
    Specifies the inputs for the Darth Fader pipeline

 INPUTS: 
   *INDIR - directory containing the input test spectra, training set
           and/or eigentemplates
   *incat - name of FITS file containing test spectra
   *trainingcat - name of FITS file containing training set to compute
                 eigentemplates. If you have already computed these,
                 set trainingcat=''
   *rmscurve - the name of the FITS file containing your RMS error
               curve(s) associated with the test spectra. For white
               gaussian noise, set rmscurve = ''
   *templatecat - name of FITS file containing eigentemplates. Set
                  templatecat='' if you wish Darth Fader to compute
                  these from a training set. NOTE: Either templatecat
                  or trainingcat MUST be specified.

   *lstep - logarithmic pixel scaling. Note: Spectra must be LOG-BINNED. 
   *(optional) training_lmin, training_lmax, data_lmin, data_lmax -
   the start and end wavelengths of the training spectra and test
   spectra, used to compute shiftpar (see below). You may specify
   shiftpar directly, if you choose
   *shiftpar - this is the pixel difference between the end of the
               template and the end of the test spectrum. If
               training_lmax = data_lmax, this will be 0. 

   *EstimRedshiftsFromNoisyData - set to 1 if you wish to use the
                                  noisy data in the cross-correlation
                                  step to estimate redshifts. This is
                                  recommended for white gaussian
                                  noise.
   *ComputeEigentemplates - set to 0 if you have already computed
                            eigentemplates from the training set and
                            have specified templatecat
   *nscale - number of scales in the denoising steps. Set to 0 to
             compute automatically from the data
   *EnergPercent - Darth Fader will retain all eigentemplates such
                   that the total eigenvalue weight of the retained
                   templates is greater than/equal to EnergPercent

   *OUTDIR - existing directory in which to place the outputs of the
             Darth Fader run
   *OutputComponents, OutputTemplates, OutputRedshifts,
   OutputCleanCatalogue - set to 1 to write these data to a
                          file. Must specify the relevant filename. 

 OUTPUTS: 
    Structure detailing input parameters, algorithm parameters and
    output parameters, to be used by Darth Fader
 
 HISTORY: 
       Written: Adrienne Leonard, Oct 2013
;-
;+
 NAME:
        df_peaks

 PURPOSE:
   Count the number of emission and absoption lines in a spectrum or a set of spectra

 CALLING:
     TabPeak = df_peaks(DecSpectra,    noise=noise, nsigma=nsigma)

 INPUTS:
     DecSpectra -- IDL structure: decomposed spetra derived from df_get_spectra_components
    
 OUTPUTS:
     TabPeak --   IDL array of structures : Tab[i] is a structure relative to the ith spectrum, with the following fields
                                        abspeaks: number of absoption lines
                                         empeaks:  number of emission lines
                                         allpeaks: number of peaks (i.e. abspeaks + empeaks)

 INPUT KEYWORDS:
  noise -- IDL array : RMS per pixel
  nsigma  -- double :  peaks with a maximum amplitude small than nsigma*noise are not taken into account. Default value is 0.1.

 EXAMPLE:
       Remove the baseline of all spectra
               TabPeak = df_peaks(DecSpectra,  noise=RMSnoisePerPixe, nsigma=0.1) 
         
 HISTORY:
	Written: Daniel Machado & Jean-Luc Starck, 2013
	Sept, 2013 File creation

;-
