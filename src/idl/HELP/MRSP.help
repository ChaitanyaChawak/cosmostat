%VERSION:2
20
289
0:MR_MODPHASE_DWT_REC
854:MR_MODPHASE_DWT_TRANS
2021:MR_MODPHASE_UWT_REC
2879:MR_MODPHASE_UWT_TRANS
3611:MRS_MODPHASE_DWT_REC
4336:MRS_MODPHASE_DWT_TRANS
6126:MRS_MODPHASE_UWT_REC
6818:MRSP_ALM2SPEC
7554:MRSP_ALMREC
8398:MRSP_ALMTRANS
11114:MRSP_MATMASK_DECONV
14055:MRSP_REC
14840:MRSP_RESIZE
15645:MRSP_SPEC
16882:MRSP_TVF
18920:MRSP_WTFILTER
21938:MRSP_WTGET
22733:MRSP_WTPUT
23529:MRSP_WTREC
25136:MRSP_WTTRANS
;+
 NAME:
        MR_MODPHASE_DWT_REC

 PURPOSE:
	Reconstruct an vector field of an image from its decimated wavelet transform.

 CALLING:
      MR_MODPHASE_DWT_REC,Trans, Rec

 INPUTS:
       Trans : IDL structure; Wavelet transform structure (see MR_MODPHASE_DWT_REC) ;     
    
 OUTPUTS:
      Imag -- IDL array of a vector field image fltarr[*,*,2] : Output image be reconstructed 

 EXTERNAL CALLS:

 EXAMPLE:
       Compute the orthogonal wavelet transform of a vector field I with five scales and reconstrcution
               mr_modphase_dwt_trans, Imag, WT, NbrScale=5
               mr_modphase_dwt_rec, WT, RecIma
               tvscl, RecIma.coef[*,*,0] ; plot the first reconstructed component   
               tvscl, RecIma.coef[*,*,1] ; plot the second reconstructed component   
         
 HISTORY:
	Written:  Jerome Bobin, May 2008
;-
;+
 NAME:
        MR_MODPHASE_DWT_TRANS

 PURPOSE:
	Compute the decimated wavelet transform of a vector field (ex Q-U CMB data) image.
   It computes first the modulus and the phase, and run a decimated WT on each.
   The output is a IDL structure.

 CALLING:
      MR_MODPHASE_DWT_TRANS, Imag, Trans, NbrScale=NbrScale

 INPUTS:
     Imag -- IDL array of a vector field image fltarr[*,*,2] : Input image be transformed 
    
 OUTPUTS:
     Trans -- IDL structures with the following fields:  
         NBRSCALE  -- LONG: Number of scales of the wavelet transform
         ModCoeff      -- 2D IDL array [*,*] : Wavelet coefficients of the modulus
         AngCoeff      -- 2D IDL array [*,*] : Wavelet coefficients of the phase

 KEYWORDS:
         NBRSCALE  -- LONG: Number of scales of the wavelet transform

 EXTERNAL CALLS:

 EXAMPLE:
       Compute the orthogonal wavelet transform of a vector field I with five scales
       The result is stored in WT
               mr_modphase_dwt_trans, Imag, WT, NbrScale=5
               tvscl, WT.coef[*,*,0] ; plot the wavelet transform (f = 0..11) of the modulus
         
 HISTORY:
	Written:  Jerome Bobin, May 2008
;-
;+
 NAME:
        MR_MODPHASE_UWT_REC

 PURPOSE:
	Reconstruct an vector field of an image from its undecimated wavelet transform.

 CALLING:
      MR_MODPHASE_UWT_REC, Trans, Rec

 INPUTS:
       Trans : IDL structure; Wavelet transform structure (see MR_MODPHASE_UWT_REC) ;     
    
 OUTPUTS:
      Imag -- IDL array of a vector field image fltarr[*,*,2] : Output image be reconstructed 

 EXTERNAL CALLS:

 EXAMPLE:
       Compute the undecimated wavelet transform of a vector field I with five scales and reconstrcution
               mr_modphase_uwt_trans, Imag, WT, NbrScale=5
               mr_modphase_uwt_rec, WT, RecIma
               tvscl, RecIma.coef[*,*,0] ; plot the first reconstructed component   
               tvscl, RecIma.coef[*,*,1] ; plot the second reconstructed component   
         
 HISTORY:
	Written:  Jerome Bobin, May 2008
;-
;+
 NAME:
         MR_MODPHASE_UWT_TRANS

 PURPOSE:
	   Computes a multiresolution transform of a vector field.

 CALLING:

      MR_MODPHASE_UWT_TRANS, Ima, Trans, NbrScale=NbrScale   

 INPUTS:
     Ima -- [*,*,2] 3D IDL array: vector field we want transform
    
 OUTPUTS:
     Transf -- IDL Structure :
			NbrScale -- scalar - number of scales	
			ModCoeff -- 3D IDL Array : multiresolution transform of the modulus
			AngCoeff -- 3D IDL Array : multiresolution transform of the angles 

 KEYWORDS:
      NbrScale -- scalar : number of scales - default : 4

 EXAMPLE:
       Compute the multiresolution of a vector field I_QU :
              MR_MODPHASE_UWT_TRANS, I_QU, CoeffStruct

 HISTORY:
	Written: Jerome BOBIN 04/2008
;-
;+
 NAME: 
       MRS_MODPHASE_DWT_REC

 PURPOSE: 
        Reconstruct a vector field image on the Sphere from its decimated wavelet 
        transform (see mrs_modphase_dwt_trans).   

 CALLING:
       MRS_MODPHASE_DWT_REC, WT_Struct, result

 INPUT:
       WT_Struct : IDL structure; Wavelet transform structure (see MRS_MODPHASE_DWT_TRANS) 
          
 OUTPUTS:
      Result:  2D array of an Healpix vector field (nested format)
             
 EXTERNAL CALLS
            bwt01_lift written by Olivier Forni and Nabila Aghanim

 EXAMPLE:
   mrs_modphase_dwt_trans, Imag, WT, NbrScale=5
   mrs_modphase_dwt_rec, WT, RecIma
       Wavelet transform and reconstruction

 HISTORY:
       Written: Jean-Luc Starck, May 2008.
;-
;+
 NAME:
        MRS_MODPHASE_DWT_TRANS

 PURPOSE:
	Compute the decimated wavelet transform on the sphere of a vector field (ex Q-U CMB data), 
       using the healPix pixel representation (nested data representation). 
       The discrete wavelet transform is applied successively on the  12 faces of the
       Healpix image. On each face, the routine "mr_modphase_dwt_trans" is called. 
       It computes first the modulus and the phase, and run a decimated WT on each.
       The output is a IDL structure.

 CALLING:
     MRS_MODPHASE_DWT_TRANS, Imag, Trans, NbrScale=NbrScale

 INPUTS:
     Imag -- IDL array of a healpix vector field  fltarr[*,2] : Input image be transformed 
    
 OUTPUTS:
     Trans -- IDL structures with the following fields:  
         NBRSCALE  -- LONG: Number of scales of the wavelet transform
         COEF      -- 3D IDL array [*,*,12,2] : Wavelet coefficients
                        cube  containing all wavelet coefficients
                        COEF[*,*, f, 0] = wavelet transform of face f (f=0..11) of the modulus.
                        COEF[*,*, f, 1] = wavelet transform of face f (f=0..11) of the phase.
	   Nx -- number of pixels on the side of the Healpix patch, nside
	   Ny -- same as Nx			
      Nside -- Nside value
      Npix -- Number of pixels 

 KEYWORDS:
         NBRSCALE  -- LONG: Number of scales of the wavelet transform

 EXTERNAL CALLS:
         mr_modphase_dwt_trans

 EXAMPLE:
       Compute the orthogonal wavelet transform of a vector field I with five scales
       The result is stored in WT
               mrs_modphase_dwt_trans, Imag, WT, NbrScale=5
               tvscl, WT.coef[*,*,f,0] ; plot the fth face wavelet transform (f = 0..11) of the modulus
         
 HISTORY:
	Written:  Jean-Luc Starck, May 2008
;-
;+
 NAME: 
       MRS_MODPHASE_UWT_REC

 PURPOSE: 
        Reconstruct a vector field image on the Sphere from its undecimated wavelet 
        transform (see mrs_modphase_uwt_trans).   

 CALLING:
       MRS_MODPHASE_UWT_REC, WT_Struct, result

 INPUT:
       WT_Struct : IDL structure; Wavelet transform structure (see MRS_MODPHASE_UWT_TRANS) 
          
 OUTPUTS:
      Result:  2D array of an Healpix vector field (nested format)
             
 EXTERNAL CALLS
            mr_modphase_dwt_rec

 EXAMPLE:
   mrs_modphase_uwt_trans, Imag, WT, NbrScale=5
   mrs_modphase_uwt_rec, WT, RecIma
       Wavelet transform and reconstruction

 HISTORY:
       Written: Jean-Luc Starck, May 2008.
;-
;+
 NAME:
        mrsp_alm2spec

 PURPOSE:

   Computes the power spectrums and cross spectrums of a polarized map from the A_{l,m} coefficients.  

 CALLING:
     P = mrsp_alm2spec(ALM, StdPS=StdPS)

 INPUTS:
     ALM -- IDL  structure: Alm coefficients (see mrsp_almtrans.pro). 
    
 OUTPUTS:
      P -- IDL fltarr: the TT, EE, BB, TE, TB, EB spectrums. P[k,i] = Mean(  SPECTRUM[*,l,i]  )	i=0...5

 OUTPUT KEYWORDS:
    StdPS  -- 2D IDL fltarr:standard deviation of spectrums:   StdPS[l,i] = stddev( PowSpecIma[l, -l:l ] )

 EXTERNAL CALLS:

 EXAMPLE:
       Compute the spectrums of ALM from a polarized image. 
               P = mrsp_alm2spec( ALM ) 
         
 HISTORY:
	Written: Olivier Fourt, 2009
	July, 2009 File creation
;-
;+
 NAME:
        mrsp_almrec

 PURPOSE:
   Computes the inverse spherical harmonic transform of a POLARIZED TQU map using the HEALPix representation (NESTED data).

 CALLING:
     mrsp_almrec, Trans, imag, pixel_window=pixel_window

 INTPUTS:
     Trans -- IDL structures of the ALM transform (see mrsp_almtrans.pro).

 OUTPUTS:
     Imag -- IDL 2D array of a POLARIZED TQU healpix map image reconstructed

 KEYWORDS:

     pixel_window -- scalar: if set, the image is convolved by the healpix pixel window (only for Healpix map)

 EXTERNAL CALLS:
       anafast (healpix software)
       alm2map_cxx (healpix C++ software)

 EXAMPLE:
       Compute the inverse spherical harmonix transform  
               mrsp_almrec, AlmTrans, ImagRec 
         
 HISTORY:
	Written: Pierrick Abrial & Jean-Luc Starck, 2005
	December, 2005 File creation
;-
;+
 NAME:
        mrsp_almtrans

 PURPOSE:
   Computes the spherical harmonic transform of a POLARIZED TQU map using the HEALPix representation (NESTED data).

 CALLING:
     mrsp_almtrans, Imag, Trans, lmax=lmax, tab=tab, complex=complex, norm=norm, fast=fast

 INPUTS:
     Imag -- IDL array of healpix map or GLESP structure: Input image to be transformed 
    
 OUTPUTS:
     Trans -- IDL structures with the following fields: 
                      ALM: fltarray[ *, 2, 3 ] = real and imaginary part of the ALM, ALM[*,*,0] is ALM T, ALM[*,*,1] is ALM E and ALM[*,*,2] is ALM B
                           or cfarr[ *, 3 ] = complex alm values if the keyword complex is set
                           or fltarray[ NbrMaxM, NbrMaxL, 2, 3 ] if the keyword tab is set
                           or cfarr[ NbrMaxM, NbrMaxL, 3 ] of both keyword complex and tab are set.
                      COMPLEX_ALM = 0 (default) ==> ALM contains the real and imaginary parts
                                  = 1           ==> ALM contain an IDL complex array

                      PixelType: int = 0 for Healpix (1 for GLESP but not used)
                      tab: int = 0 for default ALM representation (i.e. 1D IDL array)
                               = 1 for 2D representation (i.e. l for the first dimension and m for the second)
                      nside : int = Healpix nside parameter
                      lmax : int = maximum l value in the Spherical Harmonic Space.
                      npix : int = Number of pixels of the input image (12*nside*nside for Healpix)

                      TabNbrM: IDL int array: set only of the /tab keyword is set.
                      index: IDL int array: ALM pixel indices.
					   NormVal: float, normalization value aplied to the alm coefficients (if keyword /norm used)
					   norm: int = 0 if no normalization has been aplied, else = 1

 KEYWORDS:
      complex   : if set Trans.alm will contain complex values instead of the real and imaginary parts 
      Tab       : if set, ALM coefficients in Trans.alm are stored in a 2D array:
                           Trans.alm[m,l]  where m = 0.. Trans.TabNbrM[l]-1  and l = 0..lmax-1
      Lmax      : Number of spherical harmonics computed in the decomposition HEALPIX==> default is 3*nside, should be between 2*nside and 4*nside
      norm      : if set, a normalization is performed to the alm coefficient.


 EXTERNAL CALLS:
       anafast (healpix software)


 EXAMPLE:
       Compute the spherical harmonics transform of an image. 
        The result is stored in Output
               mrsp_almtrans, Imag, Output 
         
 HISTORY:
	Written: Pierrick Abrial & Jean-Luc Starck, 2005
	December, 2005 File creation
;-
;+
 NAME: 
       MRSP_MATMASK_DECONV

 PURPOSE:
        Invert the power spectra coupling due to masks (potentially different for temperature/polarization) using a standard MASTER pseudo Cl approach.

 CALLING:
     PSPECMASTER = mrsp_matmask_deconv(PolImag, Mask, Lmax=Lmax,Niter=Niter,MaskP=MaskP,NoiseRea=NoiseRea,EBMAP=EBMAP,PS_MSKMAP=PS_MSKMAP,PS_MSKNOISE=PS_MSKNOISE,PS_MASK=PS_MASK,MatMask= MatMask,SpecRad=SpecRad,InvMatMask= InvMatMask,tebflag=tebflag,Positivity=Positivity,ZeroMonopDip=ZeroMonopDip,NormAlm=NormAlm, PolaFastALM = PolaFastALM,WorkEB=WorkEB,SVD=SVD,uncorr=uncorr,FastDeconv=FastDeconv,verb=verb,Timer=Timer)

 INPUTS:
     PolImag -- Healpix 1D/2D array: Input Healpix (polarized) image the spectra of which are looked after
	  Mask --  Healpix 1D array: weighting coefficients for each region in the sky (used either only for T, for TQU or for TEB, see WorkEB flag and MaskP input)
     
          
 INPUT KEYWORDS:
      Lmax      : Number of spherical harmonics computed in the decomposition
                                       (default is 3*nside, should be between 2*nside and 3*nside)
      niter: int: number of iterations used in the iterative reconstruction (default: C++ default (40)- check DEF_NITER_ITER_INV in the C++ code)
      EBMAP: Compute and return the EBMAP if TQU maps is used as inputs
	   MaskP: Polarization Mask for Q/U or E/B (see WorkEb flag) if different from temperature mask (default: Mask)
	   NoiseRea: Realisation of Noise -Gaussian, same size as PolImag, spectra to be subtracted prior to MASTER deconvolution

 INPUT/OUTPUT KEYWORDS:
      EBMAP: Compute and return the EBMAP if TQU maps is used as inputs
  	   PS_MSKMAP: Power spectra of the masked input maps
	   PS_MSKNOISE: Power spectra of the masked noise maps
	   PS_MASK: Power spectra of the masks
	   MatMask: Master coupling matrices
	   SpecRad: Spectral radii for each coupling matrices (iterative inversion)
	   InvMatMask: inverse of coupling matrices (SVD)

 INPUT FLAGS:
      tebflag: Input map is in TEB
      Positivity: Positivity of the solution enforced (iterative approach)
      ZeroMonopDip: Monopole and Dipole are assumed equal to zero (temperature power spectrum, both iterative and SVD)
      NormAlm: Alm l2 normalized
      PolaFastALM: Fast Alm Xform allowed
      WorkEB: Mask the TEB maps and not the TQU
      SVD: Perform inversion of coupling matrix using SVD (unregularized)
	   uncorr: Uncorrelated noise in pixel space (means no TE, TB, EB noise subtraction, only TT,EE and BB).
      FastDeconv: fast computation of either spectral radius or inverse matrix for EEEE,EEBB matrices
      Timer: Time information printed


 OUTPUTS:
     PSPECMASTER -- IDL 1D/2D array: Power spectra of the masks after deconvolution of the mask effects using MASTER  
	  
       
 EXTERNAL CALLS:
       mrsp_matmask (C++ program)

 EXAMPLE:
      
 HISTORY:
       Written : Florent Sureau   2013.
;-
;+
 NAME:
        MRSP_REC

 PURPOSE:
	Reconstruct a polarized image from its wavelet transform.

 CALLING:
      MRSP_REC, Trans, Rec

 INPUTS:
       Trans : IDL structure; Wavelet transform structure (see MRSP_TRANS) ;     
    
 OUTPUTS:
      Imag -- IDL array of a polarized image fltarr[*,*,3] : Output image be reconstructed 

 EXTERNAL CALLS:

 EXAMPLE:
       Compute the undecimated wavelet transform of a vector field I with five scales and reconstrcution
               mrsp_trans, Imag, /UWT, NbrScale=5
               mrsp_rec, WT, RecIma
               tvscl, RecIma.coef[*,*,0] ; plot the first reconstructed component   
               tvscl, RecIma.coef[*,*,1] ; plot the second reconstructed component   
         
 HISTORY:
	Written:  Jean-Luc Starck, May 2008
;-
;+
 NAME:
        mrsp_resize

 PURPOSE:
   Resize polarized map in healpix representation 

 CALLING:
     resize_map = mrsp_resize( map, nside=nside, ViaAlm=ViaAlm, teb=teb )

 INPUTS:
     Imag -- 3D IDL array of healpix polarized map in TQU scheme: Input image to be transformed 
    
 OUTPUTS:
     resize_map -- 3D IDL array of healpix polarized map.

 KEYWORDS:
      nside     : the nside of the healpix output map
	   ViaAlm	 : use ALM transform
	   teb		 : The input and output imag are in TEB scheme

 EXTERNAL CALLS:
       anafast (healpix software)
       cl2map (glesp software)
       reorder (healpix software)

 EXAMPLE:
       resize an healpix map

               map2 = mrsp_resize(map,nside = 256)

         
 HISTORY:
	Written:  Olivier Fourt, 2009
	February, 2009 File creation
;-
;+
 NAME:
        mrsp_spec

 PURPOSE:
   Computes the power spectrums and cross spectrums of a polarized map, 
   using the HEALPix representation (nested data representation by default)

 CALLING:
     P = mrsp_spec( Imag, nonorm=nonorm, teb=teb, NormVal=NormVal, StdPS=StdPS, lmax=lmax )

 INPUTS:
     Imag -- IDL array of healpix polarized map (ie3 maps) in TQU or TEB (default TQU): Input image to be transformed 
    
 OUTPUTS:
     P -- IDL fltarr: the TT, EE, BB, TE, TB, EB spectrums. P[k,i] = Mean(  SPECTRUM[*,l,i]  )	i=0...5

 INPUT KEYWORDS:
		teb -- map is in TEB
		nonorm -- no normalization of alm
		Lmax  -- int: Number of spherical harmonics computed in the decomposition and size of the computed spectrum (Lmax+1)
					  (HEALPIX==> default is 3*nside, should be between 2*nside and 4*nside)

	OUTPUT KEYWORDS:
		StdPS  -- 2D IDL fltarr:standard deviation of spectrums:   StdPS[l,i] = stddev( PowSpecIma[l, -l:l ] )
		NormVal -- float: normalization value of the alm coefficients


 EXTERNAL CALLS:
       mrs_almtrans.pro
		mrsp_almtrans.pro

 EXAMPLE:
       Compute the power spectrum of an image. 
               P = mrsp_spec(Imag) 
         
 HISTORY:
	Written: Olivier Fourt, 2009
	June, 2009 File creation
;-
;+
 NAME: 
				mrsp_tvf

 PURPOSE: 
				plot one  Healpix face of a polarized vector field  map 

 CALLING:
 				mrsp_tvf, map, face, win=win, skip=skip, length_factor=length_factor, xsize=xsize, ysize=ysize,
                                        log=log, maxval=maxval, minval=minval, xtit=xtit, ytit=ytit, tit=tit, jpg=jpg, deg=deg

 INPUT: 
 				map --- IDL 2D array Healpix POLARIZED map in NESTED format:  map[*,0] = T field,	map[*,1] = Q field,		map[*,2] = U field
				face --- int: face number between 0 and 11 
				
 KEYWORD:
				ima --- IDL 2D array: if set, the image is first displayed, 
                                                     and vector are overplotted
                               skip --- scalar: the vectors are plotted for a subset of pixels
                                                skip  (default is 10) fixes the number of pixels we skip 
                                                between two plotted vectors
                               length_factor --- scalar: The amplitude of the vector is plotted by
                                                    length_factor before being plotted.
                               win -- if set, open a new window using: window, win, xsize=xsize, ysize=ysize
                               xsize,ysize -- scalar = size of the opened window (defaut  is 500x575)
                               xtit -- string: x-axis title
                               ytit -- string: y-axis title
                               tit -- string:  title of the plot
                               jpg -- string: if set, a jpeg file is created with filename given by jpg
                               log -- scalar: if set, plot the temperature in log
                               minval, maxval -- scalar: min value and max value of the temperature map to be plotted
                               deg -- scalar: if set, x and y axis are in degree (arcminute by default)
                                

 HISTORY:
				Written by Jean-Luc Starck, July 2007
;-
;+
 NAME:
        mrsp_wtfilter

 PURPOSE:
	Wavelet denoising of a POLARIZED image on the sphere (Healpix NESTED pixel representation).
       By default Gaussian noise is considered. If the keyword SigmaNoise is not 
       set, then the noise standard deviation is automatically estimated.
       If the keyword MAD is set, then a correlated Gaussian noise is considered,
       and the noise level at each scale is derived from the Median Absolution Deviation (MAD)
       method. If the keyword KillLastScale  is set, the coarsest resolution is set to zero.
       The thresholded wavelet coefficients can be obtained using the keyword Trans.
       If the input keyword NITER is set, then an iterative algorithm is applied and
       if the POS keyword is also set, then a positivity constraint is added.

 CALLING:

		mrsp_wtfilter, Imag, Filter, NbrScale=NbrScale, NSigma=NSigma, SigmaNoise=SigmaNoise, mad=mad, KillLastScale=KillLastScale,
						Trans=Trans, niter=niter, pos=pos, FirstScale=FirstScale, soft=soft, fdr=fdr, Use_FdrAll=Use_FdrAll,
						lmax=lmax, FilterLast=FilterLast, mask=mask
    
 INPUT:
     Imag -- IDL array of healpix map: Input image be filtered 

 OUTPUT:
     Filter -- IDL array of healpix map: reconstructed image from the thresholded wavelet coefficients   

 INPUT KEYWORDS:
      NbrScale : int = Number of scales (default is 4)
      NSigma: float = Level of thresholding (default is 3)
      SigmaNoise: float = Noise standard deviation. Default is automatically estimated
      MAD: int: if set, then the noise level is derive at each scale using the MAD of the
                        wavelet coefficient. MAD = median ( ABS( WaveletScale) ) / 0.6745
      KillLastScale: if set, the last scale is set to zero
      niter: int: number of iterations used in the reconstruction
      pos: if set, the solution is assumed to be positive
      FirstScale: int: Consider only scales larger than FirstScale. Default is 1 (i.e. all scales are used).
		soft: if set, use soft thresholding instead of hard thresholding
		fdr: float between 0 (default) and 1 (max, if greater or equal to 1, set to 0.05),
						used to estimate a threshold level instead of a NSigma threshold,
						threshold is applied from scale j=FirstScale to the last.
		Use_FdrAll: same as fdr but applied to all scales.
		FilterLast: if set, the last scale is filtered.
		mask: IDL array of healpix map, input mask applied.
		pos: if set, the solution is assumed to be positive

 INPUT/OUTPUT:
		lmax : int = maximum l value in the Spherical Harmonic Space (Healpix)

 OUTPUT KEYWORDS:
      Trans -- IDL structure: Threshold wavelet decomposition of the input image

 EXTERNAL CALLS:
       mrsp_wttrans
   	mrsp_wtrec
       mrs_pwttrans
   	mrs_pwtrec
       mrs_wtget
   	mrs_wtput

 EXAMPLE:
       Filter an image with 5 scales. The result is stored in Filter 
               mrsp_wtfilter, Data, Filter, NbrScale=5 
         
 HISTORY:
	Written: Jean-Luc Starck, 2005
	February, 2005 File creation
;-
;+
 NAME:
        MRSP_WTGET 

 PURPOSE:
	Return a band of a transform for polarized data (wavelet, curvelet...) obtained by the command 
       mrsp_trans.

 CALLING:

     Band = MRSP_WTGET( Trans, Component, ScaleNumber, BandNumber=BandNumber, NormVal=NormVal )  
       
 INPUTS:
		Trans -- Trans: IDL structures containing the coefficients'transform (see mrsp_trans.pro)
		ScaleNumber -- int: Scale number, The scale number must be 
                     between 0 and Trans.NbrScale-1
		Component -- int: choice of the component, 0 is for T, 1 for E and 2 for B
     

 KEYWORDS:
		NormVal -- float: Normalization value of the band.
		BandNumber -- int:  Ridgelet band number (for curvelet transform)

 EXTERNAL CALLS:

 HISTORY:
	Written: Jean-Luc Starck, 2008
	May, 2008 File creation
;-
;+
 NAME:
        mrsp_wtput

 PURPOSE:
	Put a scale in a transform for polarized data (wavelet, curvelet...) obtained by the command 
       mrsp_trans.

 CALLING:

     mrsp_wtput, Trans, Scale, Component, ScaleNumber, BandNumber=BandNumber
       
 INPUTS:
		Trans -- IDL structure: IDL structures containing the coefficients'transform (see mrsp_trans.pro)
		Scale -- IDL array: wavelet scale we want use in the decomposition. 
		ScaleNumber -- int: Scale number, The scale number must be 
                     between 0 and Trans.NbrScale-1
		Component -- int: choice of the component, 0 is for T, 1 for E and 2 for B

 KEYWORDS:
		BandNumber -- int:  Ridgelet band number (for curvelet transform)

 EXTERNAL CALLS:

 HISTORY:
	Written: Jean-Luc Starck, 2005
	February, 2005 File creation
;-
;+
 NAME:
        mrsp_wtrec

 PURPOSE:
	Compute the inverse wavelet transform of POLARIZED maps on the sphere.


 CALLING:

     mrsp_wtrec, Trans, Rec, filter=filter        
    
 INPUT:
     Trans -- IDL structures with the following fields:  
                  NbrScale : int = number of scales 
                     nside : int = Healpix nside parameter
                      npix : int = Number of pixels
                      Coef : fltarr[ npix, NbrScale, 3 ] = wavelet transform of the data. Coef[*,*,0] = wavelet transform on T, Coef[*,*,1] = wavelet transform on E, Coef[*,*,2] = wavelet transform on B
                             Coef[ *, 0, *] = wavelet coefficients of the finest scale (highest frequencies).
                             Coef[ *, NbrScale-1, *] = coarsest scale (lowest frequencies).
                       lmax: int = lmax parameter at the last scale

 OUTPUT:
     Imag -- IDL array of healpix map: reconstructed image from the wavelet coefficients   

 KEYWORDS:
      filter : Use filters for the reconstructions. If this keyword is not set, the reconstructed image
               is obtained by a simple addition of all wavelet scales.

 EXTERNAL CALLS:
       anafast (healpix software)
   	synfast (healpix software)
   	alm_product2 (idl)
   	compute_g (idl)
   	compute_h (idl)
   	compute_gtilde (idl)
   	compute_htilde (idl)

 EXAMPLE:
       Compute the inverse wavelet transform:
        The result is stored in Imag 
               mrsp_wtrec, Trans, Imag 
         
 HISTORY:
	Written: Pierrick Abrial & Jean-Luc Starck, 2004
	December, 2004 File creation
;-
;+
 NAME:
        mrsp_wttrans

 PURPOSE:
	Computes the undecimated isotropic wavelet transform of POLARIZED maps on the sphere, 
   using the HEALPix representation (NESTED data representation). The wavelet function 
	is zonal and its spherical harmonics coefficients a_l0 follow a cubic box-spline profile.
	If DifInSH is set, wavelet coefficients are derived in the Spherical Harmonic Space, 
	otherwise (default) they are derived in the direct space.


 CALLING:

 		mrsp_wttrans, Imag, out, NbrScale=NbrScale, lmax=lmax, DifInSH=DifInSH, MeyerWave=MeyerWave     

 INPUTS:
     Imag -- IDL array of healpix map: Input image to be transformed 
    
 OUTPUTS:
     Trans -- IDL structures with the following fields:  
                  NbrScale : int = number of scales 
                     nside : int = Healpix nside parameter
                      lmax : int = maximum l value in the Spherical Harmonic Space (Healpix)
                      npix : int = Number of pixels of the input image (12*nside*nside)
                      Coef : fltarr[ npix, NbrScale, 3 ] = wavelet transform of the data. Coef[*,*,0] = wavelet transform on T, Coef[*,*,1] = wavelet transform on E, Coef[*,*,2] = wavelet transform on B
                             Coef[ *, 0, *] = wavelet coefficients of the finest scale (highest frequencies).
                             Coef[ *, NbrScale-1, *] = coarsest scale (lowest frequencies). 

 KEYWORDS:
      NbrScale  : Number of scales (default is 4)
      Lmax      : Number of spherical harmonics computed in the decomposition
					(default is 3*nside, should be between 2*nside and 4*nside)
      DifInSH   : If set, compute the wavelet coefficients as the
					difference between two resolution in the spherical harmonics representation.
					Otherwise, the wavelet coefficients are computed as the difference between two resolutions
					in the initial representation.
	   MeyerWave : If set, use Meyer wavelets and set the keyword DifInSH

 EXTERNAL CALLS:
       anafast (healpix software)
   	synfast (healpix software)
   	alm_product2 (idl)
   	compute_g (idl)
   	compute_h (idl)

 EXAMPLE:

       Compute the multiresolution of an image I with default options
        The result is stored in Output
               mrsp_wttrans, Imag, Output, NbrScale=5
         
 HISTORY:
	Written: Pierrick Abrial & Jean-Luc Starck, 2004
	December, 2004 File creation
;-
