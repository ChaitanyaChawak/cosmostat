List of all info that CAMB wants
Anais Rassat 12/03/09
-----------------------


Fid.Cosmo
-----------
use_physical: sets which parameter set to use, type: LOGICAL
Only used if use_physical = T
     ombh2: Omega_b h^2, type: DOUBLE
     omch2; Omega_cdm h^2, type: DOUBLE
     omnuh2, Omega_nu h^2, type: DOUBLE
     omk , Omega_k, type: DOUBLE
Only used if use_physical = F
     omega_baryon: Omega_b, type: DOUBLE
     omega_cdm: Omega_cdm, type: DOUBLE
     omega_lambda: Omega_lambda, type: DOUBLE
     omega_neutrino: Omega_nu, type: DOUBLE
hubble: little h, type: DOUBLE
w0: w_0, type: DOUBLE
wa: w_a, type: DOUBLE
cs2_lam: comoving sound speed
temp_cemp: Temperature of CMB [K], type: DOUBLE
helium_fraction: Franction of Helium ?, type: DOUBLE
massless_neutrinos: number of massless neutrinos, type: DOUBLE
massive_neutrinos: number of massive neutrinos, type: DOUBLE
nu_mass_eigenstates: Neutrino mass splitings ?, type: INTEGER?
nu_mass_degeneracies: 0: sets nu_mass_degeneracies = massive_neutrinos, else should be array [deg, nondeg], eg: = [2 1], type: INTEGER ARRAY
nu_mass_fractions:  fraction of total omega_nu h^2 accounted for by each eigenstate, eg. 0.5, 0.5, type: DOUBLE ARRAY
initial_power_num: ??, type: INTEGER?
scalar_amp(1): ??, type: DOUBLE ARRAY
scalar_spectral_index:: ??, type: DOUBLE ARRAY
scalar_nrun: ??, type: DOUBLE ARRAY
tensor_spectral_index: DOUBLE ARRAY
initial_ratio: ratio is that of the initial tnes/scal power spectrum amplitudes, type: DOUBLE ARRAY
#Note: vector modes use the same settings as scalar modes

re_delta_redshift: width of reionization transition.  CMBFAST model was similar to re_delta_redshift ~ 0.5, type: DOUBLE
re_ioniszation_frac: if =-1 then sets to becomes fully ionized using YHe to get He contribution, otherwise x_e varises from - to re_ionization_frac, type: INTEGER
reionization: assume reionization, type: LOGICAL
re_use_optical_depth


Fid.Calc
-----------
get_scalar_cls: calculate scalar Cls, type: LOGICAL
get_vector_cls: calculate vector Cls, type: LOGICAL 
get_tensor_cls: calculate tensor Cls, type: LOGICAL 
get_transfer: calculate transfer function P(k), type: LOGICAL 
output_root: prefix of output file names, type: STRING
do_lensing:  includes CMB lensing, type: LOGICAL
do_nonlinear: calculate linear or non-linear (HALOFIT) matter power, or non-linear CMB lensing (HALFIT), type: INTEGER
l_max_scalar: l_max, accurate at l-50
k_eta_max_scalar: ??
l_max_tensor: l_max, for tensor, needs to be < l_max_scalar, type: INTEGER (?)
k_eta_max_tensor: ??

Fid.Expt
-----------